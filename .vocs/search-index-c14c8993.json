{"documentCount":94,"nextId":94,"documentIds":{"0":"docs/pages/example.md#stone-packaging-example","1":"docs/pages/getting-started.md#getting-started-with-stone-packaging","2":"docs/pages/index.md#stone-packaging","3":"docs/pages/resourcers.md#stone-packaging-resources","4":"docs/pages/advanced/ethereum.md#verifying-stone-proofs-on-ethereum","5":"docs/pages/advanced/ethereum.md#table-of-contents","6":"docs/pages/advanced/ethereum.md#prerequisites","7":"docs/pages/advanced/ethereum.md#installation","8":"docs/pages/advanced/ethereum.md#1-install-stone-cli-with-the-updated-cairo-proof-parse","9":"docs/pages/advanced/ethereum.md#check-stone-cli-has-been-installed","10":"docs/pages/advanced/ethereum.md#creating-and-verifying-proofs","11":"docs/pages/advanced/ethereum.md#1-generate-the-stone-proof","12":"docs/pages/advanced/ethereum.md#2-verify-the-proof-locally","13":"docs/pages/advanced/ethereum.md#3-serialize-the-proof-for-ethereum","14":"docs/pages/advanced/ethereum.md#ethereum-verification","15":"docs/pages/advanced/ethereum.md#1-set-up-evm-adapter","16":"docs/pages/advanced/ethereum.md#2-run-verification","17":"docs/pages/advanced/ethereum.md#3-successful-verification-output","18":"docs/pages/advanced/starknet.md#verifying-stone-proofs-on-starknet","19":"docs/pages/advanced/starknet.md#prerequisites","20":"docs/pages/advanced/starknet.md#download-binaries","21":"docs/pages/advanced/starknet.md#creating-and-verifying-a-test-proof-using-binaries","22":"docs/pages/advanced/starknet.md#splitting-the-proof","23":"docs/pages/advanced/starknet.md#stark_evm_adapter","24":"docs/pages/advanced/starknet.md#installation","25":"docs/pages/advanced/starknet.md#usage","26":"docs/pages/advanced/starknet.md#example-using-stark_evm_adapter","27":"docs/pages/advanced/starknet.md#utilizing-the-herodotus-integrity-file-to-serialize-the-proof","28":"docs/pages/advanced/starknet.md#serializing-the-proof","29":"docs/pages/advanced/starknet.md#setting-up-starknet-foundry","30":"docs/pages/advanced/starknet.md#acount-management","31":"docs/pages/advanced/starknet.md#deploying-your-account","32":"docs/pages/advanced/starknet.md#cairo-vm-verifier","33":"docs/pages/advanced/starknet.md#deploying-in-the-integrity-contracts-for-verification","34":"docs/pages/install/binaries.md#stone-packaging---installation-guide","35":"docs/pages/install/binaries.md#supported-architectures","36":"docs/pages/install/binaries.md#download-and-install-binaries","37":"docs/pages/install/binaries.md#for-macos-arm64","38":"docs/pages/install/binaries.md#for-linux-x86_64","39":"docs/pages/install/binaries.md#adding-stone-binaries-to-the-system-path","40":"docs/pages/install/binaries.md#verifying-installation","41":"docs/pages/install/debian.md#installing-stone-on-ubuntudebian","42":"docs/pages/install/debian.md#prerequisites","43":"docs/pages/install/debian.md#step-1-download-the-stone-deb-package","44":"docs/pages/install/debian.md#step-2-installating-the-package","45":"docs/pages/install/docker.md#getting-stone-docker-images","46":"docs/pages/install/docker.md#available-images","47":"docs/pages/install/docker.md#prover-image-lightweight","48":"docs/pages/install/docker.md#verifier-image-lightweight","49":"docs/pages/install/docker.md#combined-image","50":"docs/pages/install/docker.md#accessing-the-images","51":"docs/pages/install/docker.md#pulling-the-images","52":"docs/pages/install/sources.md#build-from-source","53":"docs/pages/install/sources.md#linux","54":"docs/pages/install/sources.md#step-1-install-system-dependencies","55":"docs/pages/install/sources.md#step-2-install-python-packages","56":"docs/pages/install/sources.md#step-3-download-and-set-up-bazelisk","57":"docs/pages/install/sources.md#step-4-clone-the-stone-prover-repository","58":"docs/pages/install/sources.md#step-5-navigate-to-the-project-directory","59":"docs/pages/install/sources.md#step-6-build-the-project-with-bazelisk","60":"docs/pages/install/sources.md#step-7-run-tests-with-bazelisk","61":"docs/pages/install/sources.md#step-8-create-symbolic-links-for-prover-and-verifier","62":"docs/pages/install/sources.md#step-9-locating-the-built-binaries","63":"docs/pages/install/sources.md#macos","64":"docs/pages/install/sources.md#step-1-install-dependencies","65":"docs/pages/install/sources.md#step-2-install-python-packages-1","66":"docs/pages/install/sources.md#step-3-install-bazelisk","67":"docs/pages/install/sources.md#step-4-clone-the-stone-prover-repository-1","68":"docs/pages/install/sources.md#step-5-navigate-to-the-project-directory-1","69":"docs/pages/install/sources.md#step-6-build-the-project-with-bazelisk-1","70":"docs/pages/install/sources.md#step-7-run-tests-with-bazelisk-1","71":"docs/pages/install/sources.md#step-8-create-symbolic-links-for-prover-and-verifier-1","72":"docs/pages/install/sources.md#step-9-locating-the-built-binaries-1","73":"docs/pages/usage/configuration.md#stone-prover-configuration","74":"docs/pages/usage/configuration.md#1-overview-of-the-stone-prover-configuration","75":"docs/pages/usage/configuration.md#2-security-settings-fof-the-fri-protocol","76":"docs/pages/usage/configuration.md#3-configuration-file-format","77":"docs/pages/usage/execution.md#executing-cairo-program-to-obtain-execution-trace-memory-and-air-inputs","78":"docs/pages/usage/execution.md#installing-rust","79":"docs/pages/usage/execution.md#installing-corelib","80":"docs/pages/usage/execution.md#installing-cairo1-run","81":"docs/pages/usage/execution.md#installing-cairo1-run-from-sources","82":"docs/pages/usage/execution.md#running-cairo1-run-in-a-scarb-project","83":"docs/pages/usage/execution.md#creating-and-verifying-a-proof-of-a-cairo-program","84":"docs/pages/usage/execution.md#cli-argument-list","85":"docs/pages/usage/execution.md#additional-resources","86":"docs/pages/usage/proving.md#creating-and-verifying-a-proof-running-stone-prover","87":"docs/pages/usage/proving.md#creating-and-verifying-a-proof","88":"docs/pages/usage/proving.md#download-minimal-docker-images-for-x86_64","89":"docs/pages/usage/proving.md#creating-and-verifying-a-test-proof-using-docker","90":"docs/pages/usage/verifying.md#verifying-stone-proof-using-the-binary","91":"docs/pages/usage/verifying.md#creating-and-verifying-a-test-proof-using-binaries","92":"docs/pages/usage/verifying.md#download-minimal-docker-images-for-x86_64","93":"docs/pages/usage/verifying.md#creating-and-verifying-a-test-proof-using-docker"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[3,1,12],"1":[5,1,1],"2":[2,1,18],"3":[3,1,148],"4":[5,1,13],"5":[3,5,9],"6":[1,5,30],"7":[1,5,1],"8":[10,6,23],"9":[6,6,41],"10":[4,5,1],"11":[5,8,24],"12":[5,5,11],"13":[6,5,27],"14":[2,5,1],"15":[5,6,38],"16":[3,6,23],"17":[4,6,39],"18":[5,1,29],"19":[1,1,31],"20":[2,2,7],"21":[8,2,45],"22":[3,2,41],"23":[3,1,15],"24":[1,4,6],"25":[1,4,5],"26":[5,4,38],"27":[8,1,25],"28":[3,9,20],"29":[4,1,14],"30":[2,5,35],"31":[3,5,21],"32":[3,1,28],"33":[7,1,91],"34":[4,1,24],"35":[2,4,14],"36":[4,4,1],"37":[4,8,53],"38":[5,8,55],"39":[7,4,70],"40":[2,10,30],"41":[5,1,16],"42":[1,5,19],"43":[7,5,32],"44":[6,5,20],"45":[4,1,25],"46":[2,4,1],"47":[4,5,15],"48":[4,5,13],"49":[2,5,16],"50":[3,4,12],"51":[3,4,34],"52":[3,1,20],"53":[1,3,1],"54":[5,4,25],"55":[5,4,26],"56":[7,4,30],"57":[7,4,17],"58":[7,4,11],"59":[7,4,16],"60":[6,4,9],"61":[9,4,28],"62":[6,4,7],"63":[1,3,1],"64":[4,4,38],"65":[5,4,45],"66":[4,4,13],"67":[7,4,17],"68":[7,4,11],"69":[7,4,16],"70":[6,4,9],"71":[9,4,28],"72":[6,4,7],"73":[3,1,37],"74":[7,4,325],"75":[7,4,115],"76":[4,4,193],"77":[11,1,24],"78":[2,11,17],"79":[2,11,53],"80":[3,11,16],"81":[5,14,35],"82":[7,11,49],"83":[8,11,108],"84":[3,11,129],"85":[2,11,14],"86":[8,1,25],"87":[5,8,72],"88":[7,8,22],"89":[8,8,86],"90":[6,1,31],"91":[8,6,60],"92":[7,6,22],"93":[8,6,87]},"averageFieldLength":[4.691489361702128,4.606382978723405,34.638297872340424],"storedFields":{"0":{"href":"/example#stone-packaging-example","html":"</header>\n<p>Here&#x27;s an example of how to use Stone Packaging...</p>","isPage":true,"text":"\nHere&#x27;s an example of how to use Stone Packaging...","title":"Stone Packaging Example","titles":[]},"1":{"href":"/getting-started#getting-started-with-stone-packaging","html":"</header>\n<p>...</p>","isPage":true,"text":"\n...","title":"Getting Started with Stone Packaging","titles":[]},"2":{"href":"/index#stone-packaging","html":"</header>\n<p>This is the main page of Stone Packaging documentation.</p>\n<p>Here&#x27;s an example of how to use Stone Packaging...</p>","isPage":true,"text":"\nThis is the main page of Stone Packaging documentation.\nHere&#x27;s an example of how to use Stone Packaging...","title":"Stone Packaging","titles":[]},"3":{"href":"/resourcers#stone-packaging-resources","html":"</header>\n<table><thead><tr><th>Resource</th><th>Description</th></tr></thead><tbody><tr><td><strong><a href=\"https://github.com/Moonsong-Labs/madara-prover-api\">Madara Prover API</a></strong></td><td>This project provides a server capable of executing any set of Cairo programs on top of the Starknet bootloader and generate the proof of execution of these programs. This server is used as part of the Madara sequencer to prove the transactions inside each (Madara) block</td></tr><tr><td><strong><a href=\"https://github.com/Moonsong-Labs/stone-prover-sdk\">Stone Prover SDK</a></strong></td><td>Is a <strong>Rust SDK</strong> for the Starkware Stone prover and verifier. To use this SDK, you will need the Stone prover and verifier binaries. You can either follow the instructions on the <a href=\"https://github.com/starkware-libs/stone-prover\">Stone repository</a>, download them from the <a href=\"https://github.com/Moonsong-Labs/stone-prover-sdk/releases/tag/v0.3.1\">latest SDK release.</a></td></tr><tr><td><strong><a href=\"https://github.com/zksecurity/stone-cli\">Stone CLI</a></strong></td><td>A <strong>CLI</strong> for proving Cairo programs and verifying and serializing Cairo proofs.</td></tr><tr><td><strong><a href=\"https://github.com/zksecurity/stark-evm-adapter\">Stark EVM Adapter</a></strong></td><td>stark-evm-adapter is a library that provides a set of utilities to parse and manipulate the output of the <strong>STARK</strong> stone proof. Specifically, the library can be used to generate a &quot;split proof&quot;, which is necessary for proofs to be verified on Ethereum.</td></tr><tr><td><strong><a href=\"https://github.com/HerodotusDev/integrity-calldata-generator\">Integrity Calldata Generator</a></strong></td><td>This is a utility that helps generate integrity calldata, which keeps our data safe and reliable.</td></tr><tr><td><strong><a href=\"https://github.com/cartridge-gg/cairo-proof-parser\">Cairo Proof Parser</a></strong></td><td>This lib crate is a parser written to translate beetwen different cairo proof formats. The input to the parse function is a proof in a json string format. The proof is expected to be generated by the stone prover with the -generate_annotations flag. Currently only the recursive and starknet layouts are supported.</td></tr><tr><td><strong><a href=\"https://zksecurity.github.io/stark-book/\">Stark Book</a></strong></td><td>This is the Starknet documentation where you can read and learn about it. If you want to delve deeper into Starknet you can check this <a href=\"https://docs.starknet.io/\">resource.</a></td></tr></tbody></table>","isPage":true,"text":"\nResourceDescriptionMadara Prover APIThis project provides a server capable of executing any set of Cairo programs on top of the Starknet bootloader and generate the proof of execution of these programs. This server is used as part of the Madara sequencer to prove the transactions inside each (Madara) blockStone Prover SDKIs a Rust SDK for the Starkware Stone prover and verifier. To use this SDK, you will need the Stone prover and verifier binaries. You can either follow the instructions on the Stone repository, download them from the latest SDK release.Stone CLIA CLI for proving Cairo programs and verifying and serializing Cairo proofs.Stark EVM Adapterstark-evm-adapter is a library that provides a set of utilities to parse and manipulate the output of the STARK stone proof. Specifically, the library can be used to generate a &quot;split proof&quot;, which is necessary for proofs to be verified on Ethereum.Integrity Calldata GeneratorThis is a utility that helps generate integrity calldata, which keeps our data safe and reliable.Cairo Proof ParserThis lib crate is a parser written to translate beetwen different cairo proof formats. The input to the parse function is a proof in a json string format. The proof is expected to be generated by the stone prover with the -generate_annotations flag. Currently only the recursive and starknet layouts are supported.Stark BookThis is the Starknet documentation where you can read and learn about it. If you want to delve deeper into Starknet you can check this resource.","title":"Stone Packaging Resources","titles":[]},"4":{"href":"/advanced/ethereum#verifying-stone-proofs-on-ethereum","html":"</header>\n<p>A comprehensive guide for creating and verifying Stone proofs on Ethereum networks.</p>\n","isPage":true,"text":"\nA comprehensive guide for creating and verifying Stone proofs on Ethereum networks.\n","title":"Verifying Stone proofs on Ethereum","titles":[]},"5":{"href":"/advanced/ethereum#table-of-contents","html":"\n<ul>\n<li><a href=\"#prerequisites\">Prerequisites</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#creating-and-verifying-proofs\">Creating and Verifying Proofs</a></li>\n<li><a href=\"#ethereum-verification\">Ethereum Verification</a></li>\n</ul>\n","isPage":false,"text":"\n\nPrerequisites\nInstallation\nCreating and Verifying Proofs\nEthereum Verification\n\n","title":"Table of Contents","titles":["Verifying Stone proofs on Ethereum"]},"6":{"href":"/advanced/ethereum#prerequisites","html":"\n<p>Before you begin, ensure you are on <code>linux/amd64</code> with <code>AVX</code> supported.\nRunning the prover is also supported on <code>Apple M3</code> chip takes about <code>512 secs</code>.\nRunning the prover in wsl Ubuntu on <code>Ryzen 7</code> takes about <code>252 secs</code>.</p>\n","isPage":false,"text":"\nBefore you begin, ensure you are on linux/amd64 with AVX supported.\nRunning the prover is also supported on Apple M3 chip takes about 512 secs.\nRunning the prover in wsl Ubuntu on Ryzen 7 takes about 252 secs.\n","title":"Prerequisites","titles":["Verifying Stone proofs on Ethereum"]},"7":{"href":"/advanced/ethereum#installation","html":"\n","isPage":false,"text":"\n","title":"Installation","titles":["Verifying Stone proofs on Ethereum"]},"8":{"href":"/advanced/ethereum#1-install-stone-cli-with-the-updated-cairo-proof-parse","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\"># Clone the repository</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">git clone https://github.com/guha-rahul/stone-cli.git</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\"># Navigate to the directory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cd stone-cli/</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\"># Install using Cargo</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cargo install --path .</span></span></code></pre>\n","isPage":false,"text":"\n# Clone the repository\ngit clone https://github.com/guha-rahul/stone-cli.git\n# Navigate to the directory\ncd stone-cli/\n# Install using Cargo\ncargo install --path .\n","title":"1. Install Stone CLI with the updated cairo-proof-parse","titles":["Verifying Stone proofs on Ethereum","Installation"]},"9":{"href":"/advanced/ethereum#check-stone-cli-has-been-installed","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stone-cli --help</span></span></code></pre>\n<p>Running the command should output this</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">CLI for proving Cairo programs and serializing proofs for Starknet and Ethereum</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Usage: stone-cli &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">COMMAND</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Commands:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  prove             </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  prove-bootloader  </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  verify            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  serialize-proof   </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  help              Print this message or the help of the given subcommand(s)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Options:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  -h, --help     Print help</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  -V, --version  Print version</span></span></code></pre>\n","isPage":false,"text":"\nstone-cli --help\nRunning the command should output this\nCLI for proving Cairo programs and serializing proofs for Starknet and Ethereum\n \nUsage: stone-cli &lt;COMMAND&gt;\n \nCommands:\n  prove             \n  prove-bootloader  \n  verify            \n  serialize-proof   \n  help              Print this message or the help of the given subcommand(s)\n \nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n","title":"Check Stone Cli has been installed","titles":["Verifying Stone proofs on Ethereum","Installation"]},"10":{"href":"/advanced/ethereum#creating-and-verifying-proofs","html":"\n","isPage":false,"text":"\n","title":"Creating and Verifying Proofs","titles":["Verifying Stone proofs on Ethereum"]},"11":{"href":"/advanced/ethereum#1-generate-the-stone-proof","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stone-cli prove-bootloader \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --cairo_programs ./examples/cairo0/bitwise_output.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --layout starknet \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --parameter_file ./tests/configs/bootloader_cpu_air_params.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --output bootloader_proof.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --fact_topologies_output fact_topologies.json</span></span></code></pre>\n","isPage":false,"text":"\nstone-cli prove-bootloader \\\n    --cairo_programs ./examples/cairo0/bitwise_output.json \\\n    --layout starknet \\\n    --parameter_file ./tests/configs/bootloader_cpu_air_params.json \\\n    --output bootloader_proof.json \\\n    --fact_topologies_output fact_topologies.json\n","title":"1. Generate the Stone Proof","titles":["Verifying Stone proofs on Ethereum","Creating and Verifying Proofs"]},"12":{"href":"/advanced/ethereum#2-verify-the-proof-locally","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stone-cli verify \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --proof bootloader_proof.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --annotation_file annotation.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --extra_output_file extra_output.json</span></span></code></pre>\n","isPage":false,"text":"\nstone-cli verify \\\n    --proof bootloader_proof.json \\\n    --annotation_file annotation.json \\\n    --extra_output_file extra_output.json\n","title":"2. Verify the Proof Locally","titles":["Verifying Stone proofs on Ethereum"]},"13":{"href":"/advanced/ethereum#3-serialize-the-proof-for-ethereum","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stone-cli serialize-proof \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --proof bootloader_proof.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --annotation_file annotation.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --extra_output_file extra_output.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --network ethereum \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    --output bootloader_serialized_proof.json</span></span></code></pre>\n<p>Make sure to not delete the <code>bootloader_serialized_proof.json</code> and <code>fact_topologies.json</code> files for the next steps.</p>\n","isPage":false,"text":"\nstone-cli serialize-proof \\\n    --proof bootloader_proof.json \\\n    --annotation_file annotation.json \\\n    --extra_output_file extra_output.json \\\n    --network ethereum \\\n    --output bootloader_serialized_proof.json\nMake sure to not delete the bootloader_serialized_proof.json and fact_topologies.json files for the next steps.\n","title":"3. Serialize the Proof for Ethereum","titles":["Verifying Stone proofs on Ethereum"]},"14":{"href":"/advanced/ethereum#ethereum-verification","html":"\n","isPage":false,"text":"\n","title":"Ethereum Verification","titles":["Verifying Stone proofs on Ethereum"]},"15":{"href":"/advanced/ethereum#1-set-up-evm-adapter","html":"\n<p>We need the <a href=\"https://github.com/zksecurity/stark-evm-adapter/tree/add-build-configs\">evm-adapter-cli</a> for verifying on ethereum. We need to <a href=\"https://book.getfoundry.sh/getting-started/installation\">install Foundry</a> for  verification.\nWe also need to <a href=\"https://book.getfoundry.sh/getting-started/installation\">install Foundry</a> for  running it.\nWe also need a Ethereum Mainnet Rpc which we can get from <a href=\"https://www.alchemy.com/\">Alchemy</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\"># Clone the repository</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">git clone https://github.com/zksecurity/stark-evm-adapter.git</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cd stark-evm-adapter/</span></span></code></pre>\n","isPage":false,"text":"\nWe need the evm-adapter-cli for verifying on ethereum. We need to install Foundry for  verification.\nWe also need to install Foundry for  running it.\nWe also need a Ethereum Mainnet Rpc which we can get from Alchemy.\n# Clone the repository\ngit clone https://github.com/zksecurity/stark-evm-adapter.git\ncd stark-evm-adapter/\n","title":"1. Set Up EVM Adapter","titles":["Verifying Stone proofs on Ethereum","Ethereum Verification"]},"16":{"href":"/advanced/ethereum#2-run-verification","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FORK_URL=&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">ETHEREUM-MAINNET-RPC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ANNOTATED_PROOF=./bootloader_serialized_proof.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    FACT_TOPOLOGIES=./fact_topologies.json \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cargo run --example verify_stone_proof</span></span></code></pre>\n","isPage":false,"text":"\nFORK_URL=&lt;ETHEREUM-MAINNET-RPC&gt; \\\n    ANNOTATED_PROOF=./bootloader_serialized_proof.json \\\n    FACT_TOPOLOGIES=./fact_topologies.json \\\n    cargo run --example verify_stone_proof\n","title":"2. Run Verification","titles":["Verifying Stone proofs on Ethereum","Ethereum Verification"]},"17":{"href":"/advanced/ethereum#3-successful-verification-output","html":"\n<p>Upon successfull proof verification we can get something like this 🥳</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Anvil is running.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Test wallet address: 0x70997970c51812dc3a010c7d01b50e0d17dc79c8</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verifying trace decommitments:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: Trace 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: Trace 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: Trace 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verifying FRI decommitments:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 6</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: FRI statement: 7</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: register continuous page: 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verifying main proof:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Verified: Main proof</span></span></code></pre>","isPage":false,"text":"\nUpon successfull proof verification we can get something like this 🥳\nAnvil is running.\nTest wallet address: 0x70997970c51812dc3a010c7d01b50e0d17dc79c8\nVerifying trace decommitments:\nVerified: Trace 0\nVerified: Trace 1\nVerified: Trace 2\nVerifying FRI decommitments:\nVerified: FRI statement: 0\nVerified: FRI statement: 1\nVerified: FRI statement: 2\nVerified: FRI statement: 3\nVerified: FRI statement: 4\nVerified: FRI statement: 5\nVerified: FRI statement: 6\nVerified: FRI statement: 7\nVerified: register continuous page: 0\nVerifying main proof:\nVerified: Main proof","title":"3. Successful Verification Output","titles":["Verifying Stone proofs on Ethereum","Ethereum Verification"]},"18":{"href":"/advanced/starknet#verifying-stone-proofs-on-starknet","html":"\n<p>This guide provides detailed instructions on creating and verifying Stone proofs on Starknet as well as how to deploy integrity contracts. Follow the steps below to ensure a smooth verification process.</p>\n","isPage":true,"text":"\nThis guide provides detailed instructions on creating and verifying Stone proofs on Starknet as well as how to deploy integrity contracts. Follow the steps below to ensure a smooth verification process.\n","title":"Verifying Stone proofs on Starknet","titles":[null]},"19":{"href":"/advanced/starknet#prerequisites","html":"\n<p>Before you begin, ensure you have the following tools and dependencies installed these are outlined here <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#prerequisites\">Integrity prerequisites</a>.</p>\n<ul>\n<li><a href=\"https://www.rust-lang.org/tools/install\">Rust</a></li>\n<li><a href=\"https://docs.swmansion.com/scarb/download.html\">Scarb</a></li>\n<li><a href=\"https://github.com/foundry-rs/starknet-foundry?tab=readme-ov-file#installation\">Starknet Foundry</a></li>\n</ul>\n<p>Make sure to follow the next usage instructions as referenced <a href=\"https://github.com/dipdup-io/stone-packaging?tab=readme-ov-file#usage-instructions\">here</a>.</p>\n","isPage":false,"text":"\nBefore you begin, ensure you have the following tools and dependencies installed these are outlined here Integrity prerequisites.\n\nRust\nScarb\nStarknet Foundry\n\nMake sure to follow the next usage instructions as referenced here.\n","title":"Prerequisites","titles":[null]},"20":{"href":"/advanced/starknet#download-binaries","html":"\n<p>By following the next <a href=\"../install/binaries.md\">installation guide</a>.</p>\n","isPage":false,"text":"\nBy following the next installation guide.\n","title":"Download Binaries","titles":[null,"Prerequisites"]},"21":{"href":"/advanced/starknet#creating-and-verifying-a-test-proof-using-binaries","html":"\n<p>To create and verify a test proof, follow the next steps outlined in the <a href=\"https://github.com/dipdup-io/stone-packaging?tab=readme-ov-file#creating-and-verifying-a-test-proof-using-binaries\">Creating and Verifying a Test Proof Guide</a>.</p>\n<p>Clone the repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<p>Navigate to the example test directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<p>Copy or download the binary files from the latest release to this directory.</p>\n","isPage":false,"text":"\nTo create and verify a test proof, follow the next steps outlined in the Creating and Verifying a Test Proof Guide.\nClone the repository:\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\nNavigate to the example test directory:\ncd /tmp/stone-packaging/test_files/\nCopy or download the binary files from the latest release to this directory.\n","title":"Creating and Verifying a Test Proof Using Binaries","titles":[null,"Prerequisites"]},"22":{"href":"/advanced/starknet#splitting-the-proof","html":"\n<p>Run the following command to generate the annotated split proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params_integrity.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --generate_annotations</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<p>Run the verifier to verify the proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\nRun the following command to generate the annotated split proof:\ncpu_air_prover  --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params_integrity.json \\\n    --generate_annotations true\nThe proof will be available at fibonacci_proof.json.\nRun the verifier to verify the proof:\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Splitting the Proof","titles":[null,"Prerequisites"]},"23":{"href":"/advanced/starknet#stark_evm_adapter","html":"\n<p>Alternatively, you can use the <code>stark_evm_adapter</code> by following the next instructions shown <a href=\"https://github.com/zksecurity/stark-evm-adapter?tab=readme-ov-file#cli\">here</a>.</p>\n","isPage":false,"text":"\nAlternatively, you can use the stark_evm_adapter by following the next instructions shown here.\n","title":"stark_evm_adapter","titles":[null]},"24":{"href":"/advanced/starknet#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stark_evm_adapter</span></span></code></pre>\n","isPage":false,"text":"\ncargo install stark_evm_adapter\n","title":"Installation","titles":[null,"stark_evm_adapter"]},"25":{"href":"/advanced/starknet#usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stark_evm_adapter</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n","isPage":false,"text":"\nstark_evm_adapter --help\n","title":"Usage","titles":[null,"stark_evm_adapter"]},"26":{"href":"/advanced/starknet#example-using-stark_evm_adapter","html":"\n<p>To generate an annotated proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --in_file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof_annotation.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --extra-output-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof_annotation_extra.txt</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stark_evm_adapter</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gen-annotated-proof</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-proof-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof_annotation.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-extra-annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof_annotation_extra.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --output</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span></span></code></pre>\n<ul>\n<li><code>stark_evm_adapter --stone-proof-file</code> comes from <code>cpu_air_prover --out_file</code> (JSON format)</li>\n<li><code>stark_evm_adapter --stone-annotation-file</code> comes from <code>cpu_air_verifier --annotation-file</code> (.txt format)</li>\n<li><code>stark_evm_adapter --stone-extra-annotation-file</code> comes from <code>cpu_air_verifier --extra-output-file</code> (.txt format)</li>\n</ul>\n<p>Proceed when receiving the next output:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Annotated</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wrote</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span></span></code></pre>\n","isPage":false,"text":"\nTo generate an annotated proof:\ncpu_air_verifier \\\n    --in_file test_files/fibonacci_proof.json \\\n    --annotation-file test_files/fibonacci_proof_annotation.txt \\\n    --extra-output-file test_files/fibonacci_proof_annotation_extra.txt\nstark_evm_adapter gen-annotated-proof \\\n    --stone-proof-file fibonacci_proof.json \\\n    --stone-annotation-file fibonacci_proof_annotation.txt \\\n    --stone-extra-annotation-file fibonacci_proof_annotation_extra.txt \\\n    --output fibonacci_annotated_proof.json\n\nstark_evm_adapter --stone-proof-file comes from cpu_air_prover --out_file (JSON format)\nstark_evm_adapter --stone-annotation-file comes from cpu_air_verifier --annotation-file (.txt format)\nstark_evm_adapter --stone-extra-annotation-file comes from cpu_air_verifier --extra-output-file (.txt format)\n\nProceed when receiving the next output:\nAnnotated proof wrote to fibonacci_annotated_proof.json\n","title":"Example Using stark_evm_adapter","titles":[null,"stark_evm_adapter"]},"27":{"href":"/advanced/starknet#utilizing-the-herodotus-integrity-file-to-serialize-the-proof","html":"\n<p>Clone the Herodotus Integrity repository for later procedures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/HerodotusDev/integrity.git</span></span></code></pre>\n<p>Alternatively, you can install the proof serializer tool directly:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/HerodotusDev/integrity</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof_serializer</span></span></code></pre>\n","isPage":false,"text":"\nClone the Herodotus Integrity repository for later procedures:\ngit clone https://github.com/HerodotusDev/integrity.git\nAlternatively, you can install the proof serializer tool directly:\ncargo install --git https://github.com/HerodotusDev/integrity proof_serializer\n","title":"Utilizing the Herodotus Integrity File to Serialize the Proof","titles":[null]},"28":{"href":"/advanced/starknet#serializing-the-proof","html":"\n<p>To serialize the proof, use the proof_serializer tool as follows:</p>\n<ul>\n<li>For the Original Proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">proof_serializer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof.json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_calldata</span></span></code></pre>\n<ul>\n<li>For the Annotated Proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">proof_serializer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_calldata</span></span></code></pre>\n","isPage":false,"text":"\nTo serialize the proof, use the proof_serializer tool as follows:\n\nFor the Original Proof:\n\nproof_serializer &lt; fibonacci_proof.json &gt; fibonacci_calldata\n\nFor the Annotated Proof:\n\nproof_serializer &lt; fibonacci_annotated_proof.json &gt; fibonacci_calldata\n","title":"Serializing the Proof","titles":[null,"Utilizing the Herodotus Integrity File to Serialize the Proof"]},"29":{"href":"/advanced/starknet#setting-up-starknet-foundry","html":"\n<p>To interact with Starknet Foundry, set up your account and configuration as follows.</p>\n","isPage":false,"text":"\nTo interact with Starknet Foundry, set up your account and configuration as follows.\n","title":"Setting Up Starknet Foundry","titles":[null]},"30":{"href":"/advanced/starknet#acount-management","html":"\n<p>Refer to the following links for managing your Starknet Foundry account:</p>\n<p><a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/account.html\">Account Management</a>\n<a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/add.html\">Add account</a>\n<a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/create.html\">Create account</a></p>\n<p>Make sure you set up up your &#x27;snfoundry.toml&#x27; configuration with appropriate account name and RPC url inside your Integrity cloned repository.</p>\n","isPage":false,"text":"\nRefer to the following links for managing your Starknet Foundry account:\nAccount Management\nAdd account\nCreate account\nMake sure you set up up your &#x27;snfoundry.toml&#x27; configuration with appropriate account name and RPC url inside your Integrity cloned repository.\n","title":"Acount Management","titles":[null,"Setting Up Starknet Foundry"]},"31":{"href":"/advanced/starknet#deploying-your-account","html":"\n<p>Before deploying make sure you prefunded your account.</p>\n<p><a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/deploy.html\">Deploy Account</a></p>\n<p>Execute the next <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#monolith-proof\">example</a> to check if the setup is correct.</p>\n","isPage":false,"text":"\nBefore deploying make sure you prefunded your account.\nDeploy Account\nExecute the next example to check if the setup is correct.\n","title":"Deploying Your Account","titles":[null,"Setting Up Starknet Foundry"]},"32":{"href":"/advanced/starknet#cairo-vm-verifier","html":"\n<p>For veryfing the proof.json you can utilize the next tool by pasting the proof.json file in the drop box, it&#x27;s made in Rust and WASM in JS: <a href=\"https://demo.swiftness.iosis.tech/\">cairo-vm-verifier</a></p>\n","isPage":false,"text":"\nFor veryfing the proof.json you can utilize the next tool by pasting the proof.json file in the drop box, it&#x27;s made in Rust and WASM in JS: cairo-vm-verifier\n","title":"Cairo-VM-Verifier","titles":[null]},"33":{"href":"/advanced/starknet#deploying-in-the-integrity-contracts-for-verification","html":"\n<p>Make sure you&#x27;re in the Integrity cloned repository.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrity</span></span></code></pre>\n<p>For verifying onchain with the Integrity contracts we will use the <code>verify-on-starknet.sh</code> script following the <a href=\"https://github.com/HerodotusDev/integrity/blob/main/deployed_contracts.md#main-contracts\">deployed contracts</a>.</p>\n<p>This is the main Herodotus example for testing.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./verify-on-starknet.sh</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> examples/calldata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> recursive</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keccak_248_lsb</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stone5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo0</span></span></code></pre>\n<p>You can use the next configurations.</p>\n<ul>\n<li>layout: [<code>dex</code>, <code>recursive</code>, <code>recursive_with_poseidon</code>, <code>small</code>, <code>starknet</code>, <code>starknet_with_keccak</code>]</li>\n<li>hashers: [<code>keccak</code>, <code>blake2s</code>]</li>\n<li>cairo_version: [<code>cairo0</code>, <code>cairo1</code>]</li>\n<li>stone_version: [<code>stone5</code>, <code>stone6</code>]</li>\n</ul>\n<p>Hash function and hasher bit length are combined into one setting:</p>\n<ul>\n<li>hasher: [<code>keccak_160_lsb</code>, <code>blake2s_160</code>, <code>blake2s_248_lsb</code>]</li>\n</ul>\n<p>Following this let&#x27;s deploy our fibonacci_calldata in the Herodotus <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#factregistry-and-proxy-contract\">proxy contract</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./verify-on-starknet.sh</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    /home/&#x27;user&#x27;/stone-packaging/test_files/fibonacci_calldata</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    small</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    keccak_160_lsb</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    stone6</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    cairo1</span></span></code></pre>\n<p>Wait for the tx and you&#x27;ve made the verification in Starknet! :)</p>","isPage":false,"text":"\nMake sure you&#x27;re in the Integrity cloned repository.\ncd integrity\nFor verifying onchain with the Integrity contracts we will use the verify-on-starknet.sh script following the deployed contracts.\nThis is the main Herodotus example for testing.\n./verify-on-starknet.sh 0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a examples/calldata recursive keccak_248_lsb stone5 cairo0\nYou can use the next configurations.\n\nlayout: [dex, recursive, recursive_with_poseidon, small, starknet, starknet_with_keccak]\nhashers: [keccak, blake2s]\ncairo_version: [cairo0, cairo1]\nstone_version: [stone5, stone6]\n\nHash function and hasher bit length are combined into one setting:\n\nhasher: [keccak_160_lsb, blake2s_160, blake2s_248_lsb]\n\nFollowing this let&#x27;s deploy our fibonacci_calldata in the Herodotus proxy contract.\n./verify-on-starknet.sh \\\n    0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a \\\n    /home/&#x27;user&#x27;/stone-packaging/test_files/fibonacci_calldata \\\n    small \\\n    keccak_160_lsb \\\n    stone6 \\\n    cairo1\nWait for the tx and you&#x27;ve made the verification in Starknet! :)","title":"Deploying in the Integrity Contracts for Verification","titles":[null]},"34":{"href":"/install/binaries#stone-packaging---installation-guide","html":"</header>\n<p>This guide provides detailed instructions on how to download and install the <a href=\"https://github.com/starkware-libs/stone-prover\">Stone</a> binaries, based on your operating system (OS) and architecture so follow along.</p>\n","isPage":true,"text":"\nThis guide provides detailed instructions on how to download and install the Stone binaries, based on your operating system (OS) and architecture so follow along.\n","title":"Stone Packaging - Installation Guide","titles":[]},"35":{"href":"/install/binaries#supported-architectures","html":"\n<p>Stone binaries are available for the following architectures:</p>\n<ul>\n<li>\n<strong>x86_64 Linux</strong>\n</li>\n<li>\n<strong>ARM64 macOS</strong>\n</li>\n</ul>\n","isPage":false,"text":"\nStone binaries are available for the following architectures:\n\n\nx86_64 Linux\n\n\nARM64 macOS\n\n\n","title":"Supported Architectures","titles":["Stone Packaging - Installation Guide"]},"36":{"href":"/install/binaries#download-and-install-binaries","html":"\n","isPage":false,"text":"\n","title":"Download and Install Binaries","titles":["Stone Packaging - Installation Guide"]},"37":{"href":"/install/binaries#for-macos-arm64","html":"\n<ol>\n<li>Download the cpu_air_prover and cpu_air_verifier binaries:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-arm64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-arm64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"2\">\n<li>Make the binaries executable:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"3\">\n<li>Move the binaries to /usr/bin for system-wide access (optional):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span></code></pre>\n<p>This step is optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.</p>\n","isPage":false,"text":"\n\nDownload the cpu_air_prover and cpu_air_verifier binaries:\n\nwget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-arm64 -O /usr/local/bin/cpu_air_prover\nwget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-arm64 -O /usr/local/bin/cpu_air_verifier\n\nMake the binaries executable:\n\nchmod +x /usr/local/bin/cpu_air_prover\nchmod +x /usr/local/bin/cpu_air_verifier\n\nMove the binaries to /usr/bin for system-wide access (optional):\n\nsudo mv /usr/local/bin/cpu_air_prover /usr/bin/\nsudo mv /usr/local/bin/cpu_air_verifier /usr/bin/\nThis step is optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.\n","title":"For macOS (ARM64)","titles":["Stone Packaging - Installation Guide","Download and Install Binaries"]},"38":{"href":"/install/binaries#for-linux-x86_64","html":"\n<ol>\n<li>Download the <code>cpu_air_prover</code> and <code>cpu_air_verifier</code> binaries:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-x86_64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-x86_64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"2\">\n<li>Make the binaries executable:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"3\">\n<li>Move the binaries to /usr/bin for system-wide access (optional):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span></code></pre>\n<p>This step is actually optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.</p>\n","isPage":false,"text":"\n\nDownload the cpu_air_prover and cpu_air_verifier binaries:\n\nsudo wget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-x86_64 -O /usr/local/bin/cpu_air_prover\nsudo wget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-x86_64 -O /usr/local/bin/cpu_air_verifier\n\nMake the binaries executable:\n\nsudo chmod +x /usr/local/bin/cpu_air_prover\nsudo chmod +x /usr/local/bin/cpu_air_verifier\n\nMove the binaries to /usr/bin for system-wide access (optional):\n\nsudo mv /usr/local/bin/cpu_air_prover /usr/bin/\nsudo mv /usr/local/bin/cpu_air_verifier /usr/bin/\nThis step is actually optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.\n","title":"For Linux (x86_64)","titles":["Stone Packaging - Installation Guide","Download and Install Binaries"]},"39":{"href":"/install/binaries#adding-stone-binaries-to-the-system-path","html":"\n<p>If you prefer to leave the binaries in /usr/local/bin or any other folder, you can add that folder to your system’s PATH variable. This will ensure that the binaries can be executed from any directory.</p>\n<ol>\n<li>Open your shell configuration file (e.g., .bashrc for bash, .zshrc for zsh):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nano</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.bashrc</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # for bash users</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nano</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.zshrc</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # for zsh users</span></span></code></pre>\n<ol start=\"2\">\n<li>Add the following line to include /usr/local/bin in your PATH:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PATH</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/usr/local/bin:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$PATH</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span></code></pre>\n<ol start=\"3\">\n<li>Save and close the file, then reload your shell to apply the changes:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.bashrc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.zshrc</span></span></code></pre>\n<p>This step ensures that binaries placed in /usr/local/bin can be accessed from anywhere in your system without needing to move them to /usr/bin.</p>\n","isPage":false,"text":"\nIf you prefer to leave the binaries in /usr/local/bin or any other folder, you can add that folder to your system’s PATH variable. This will ensure that the binaries can be executed from any directory.\n\nOpen your shell configuration file (e.g., .bashrc for bash, .zshrc for zsh):\n\nnano ~/.bashrc # for bash users\nnano ~/.zshrc # for zsh users\n\nAdd the following line to include /usr/local/bin in your PATH:\n\nexport PATH=&quot;/usr/local/bin:$PATH&quot;\n\nSave and close the file, then reload your shell to apply the changes:\n\nsource ~/.bashrc \n# or\nsource ~/.zshrc\nThis step ensures that binaries placed in /usr/local/bin can be accessed from anywhere in your system without needing to move them to /usr/bin.\n","title":"Adding Stone Binaries to the System PATH","titles":["Stone Packaging - Installation Guide"]},"40":{"href":"/install/binaries#verifying-installation","html":"\n<p>After placing the binaries or updating the PATH, you can verify the installation by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n<p>If you see usage information, then the installation is successful. Hope you&#x27;re smilling.</p>","isPage":false,"text":"\nAfter placing the binaries or updating the PATH, you can verify the installation by running:\ncpu_air_prover --help\ncpu_air_verifier --help\nIf you see usage information, then the installation is successful. Hope you&#x27;re smilling.","title":"Verifying Installation","titles":["Stone Packaging - Installation Guide","Adding Stone Binaries to the System PATH"]},"41":{"href":"/install/debian#installing-stone-on-ubuntudebian","html":"</header>\n<p>This guide provides instructions to install Stone from a <code>.deb</code> package on Ubuntu or Debian.</p>\n","isPage":true,"text":"\nThis guide provides instructions to install Stone from a .deb package on Ubuntu or Debian.\n","title":"Installing Stone on Ubuntu/Debian","titles":[]},"42":{"href":"/install/debian#prerequisites","html":"\n<ul>\n<li>A Debian-based system (recommended: Ubuntu 22.04 or Debian 11)</li>\n<li>Super user Privilege (sudo) access to install packages</li>\n</ul>\n","isPage":false,"text":"\n\nA Debian-based system (recommended: Ubuntu 22.04 or Debian 11)\nSuper user Privilege (sudo) access to install packages\n\n","title":"Prerequisites","titles":["Installing Stone on Ubuntu/Debian"]},"43":{"href":"/install/debian#step-1-download-the-stone-deb-package","html":"\n<p>Download the latest .deb package from the Stone Packaging Releases page or using <code>wget</code> to download it directly:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover-linux-x86_64.deb</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/stone-prover-linux-x86_64.deb</span></span></code></pre>\n","isPage":false,"text":"\nDownload the latest .deb package from the Stone Packaging Releases page or using wget to download it directly:\nwget -O /tmp/stone-prover-linux-x86_64.deb https://github.com/dipdup-io/stone-packaging/releases/latest/download/stone-prover-linux-x86_64.deb\n","title":"Step 1: Download the Stone .deb Package","titles":["Installing Stone on Ubuntu/Debian"]},"44":{"href":"/install/debian#step-2-installating-the-package","html":"\n<p><strong>Install the package:</strong> Run the following command to install Stone:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dpkg</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover-linux-x86_64.deb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span></code></pre>","isPage":false,"text":"\nInstall the package: Run the following command to install Stone:\nsudo dpkg -i /tmp/stone-prover-linux-x86_64.deb ","title":"Step 2: Installating the Package.","titles":["Installing Stone on Ubuntu/Debian"]},"45":{"href":"/install/docker#getting-stone-docker-images","html":"</header>\n<p>Stone provides Docker images to simplify the deployment and usage of its prover and verifier components. There are currently three available images, hosted on GitHub Packages.</p>\n","isPage":true,"text":"\nStone provides Docker images to simplify the deployment and usage of its prover and verifier components. There are currently three available images, hosted on GitHub Packages.\n","title":"Getting Stone Docker Images","titles":[]},"46":{"href":"/install/docker#available-images","html":"\n","isPage":false,"text":"\n","title":"Available Images","titles":["Getting Stone Docker Images"]},"47":{"href":"/install/docker#prover-image-lightweight","html":"\n<ul>\n<li>Contains only the Stone prover binary.</li>\n<li>Ideal for environments where only proving functionality is needed.</li>\n</ul>\n","isPage":false,"text":"\n\nContains only the Stone prover binary.\nIdeal for environments where only proving functionality is needed.\n\n","title":"Prover Image (Lightweight)","titles":["Getting Stone Docker Images","Available Images"]},"48":{"href":"/install/docker#verifier-image-lightweight","html":"\n<ul>\n<li>Contains only the Stone verifier binary.</li>\n<li>Perfect for setups requiring only verification capabilities.</li>\n</ul>\n","isPage":false,"text":"\n\nContains only the Stone verifier binary.\nPerfect for setups requiring only verification capabilities.\n\n","title":"Verifier Image (Lightweight)","titles":["Getting Stone Docker Images","Available Images"]},"49":{"href":"/install/docker#combined-image","html":"\n<ul>\n<li>Contains both the Stone prover and verifier binaries.</li>\n<li>Suitable for environments needing both proving and verification functionalities.</li>\n</ul>\n","isPage":false,"text":"\n\nContains both the Stone prover and verifier binaries.\nSuitable for environments needing both proving and verification functionalities.\n\n","title":"Combined Image","titles":["Getting Stone Docker Images","Available Images"]},"50":{"href":"/install/docker#accessing-the-images","html":"\n<p>You can find the Stone Docker images in the GitHub Packages repository:<br/>\n<a href=\"https://github.com/orgs/dipdup-io/packages?repo_name=stone-packaging\">GitHub Packages - Stone</a></p>\n","isPage":false,"text":"\nYou can find the Stone Docker images in the GitHub Packages repository:\nGitHub Packages - Stone\n","title":"Accessing the Images","titles":["Getting Stone Docker Images"]},"51":{"href":"/install/docker#pulling-the-images","html":"\n<p>To pull an image, use the <code>docker pull</code> command followed by the image name. Here are examples for each image:</p>\n<ul>\n<li>\n<strong>For the Stone Prover :</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:master</span></span></code></pre>\n<ul>\n<li>\n<strong>For the CPU Air Prover (Lightweight):</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/cpu_air_prover:master</span></span></code></pre>\n<ul>\n<li>\n<strong>For the CPU Air Verifier (Lightweight):</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/cpu_air_verifier:master</span></span></code></pre>","isPage":false,"text":"\nTo pull an image, use the docker pull command followed by the image name. Here are examples for each image:\n\n\nFor the Stone Prover :\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:master\n\n\nFor the CPU Air Prover (Lightweight):\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/cpu_air_prover:master\n\n\nFor the CPU Air Verifier (Lightweight):\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/cpu_air_verifier:master","title":"Pulling the Images","titles":["Getting Stone Docker Images"]},"52":{"href":"/install/sources#build-from-source","html":"</header>\n<p>This guide provides step-by-step instructions for building the Stone prover and verifier from source on Linux and macOS devices.</p>\n","isPage":true,"text":"\nThis guide provides step-by-step instructions for building the Stone prover and verifier from source on Linux and macOS devices.\n","title":"Build from Source","titles":[]},"53":{"href":"/install/sources#linux","html":"\n","isPage":false,"text":"\n","title":"Linux","titles":["Build from Source"]},"54":{"href":"/install/sources#step-1-install-system-dependencies","html":"\n<p>Install the necessary system libraries using your os package manager.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> apt-get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> update</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> apt-get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libtinfo5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libdw-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libgmp3-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> python3</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> python3-pip</span></span></code></pre>\n","isPage":false,"text":"\nInstall the necessary system libraries using your os package manager.\nsudo apt-get update\nsudo apt-get install -y libtinfo5 libdw-dev libgmp3-dev git wget python3 python3-pip\n","title":"Step 1: Install System Dependencies","titles":["Build from Source","Linux"]},"55":{"href":"/install/sources#step-2-install-python-packages","html":"\n<p>Install the required Python packages, including specific versions of sympy and cairo-lang, along with cpplint, pytest, and numpy.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pip</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpplint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pytest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> numpy</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sympy==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1.12.1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo-lang==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.12.0</span></span></code></pre>\n","isPage":false,"text":"\nInstall the required Python packages, including specific versions of sympy and cairo-lang, along with cpplint, pytest, and numpy.\npip install cpplint pytest numpy sympy==1.12.1 cairo-lang==0.12.0\n","title":"Step 2: Install Python Packages","titles":["Build from Source","Linux"]},"56":{"href":"/install/sources#step-3-download-and-set-up-bazelisk","html":"\n<p>Install the Bazelisk binary to build the stone prover/verifier.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chmod</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 755</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;bazelisk-linux-amd64&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;bazelisk-linux-amd64&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/bazelisk</span></span></code></pre>\n","isPage":false,"text":"\nInstall the Bazelisk binary to build the stone prover/verifier.\nwget &quot;https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64&quot;\nchmod 755 &quot;bazelisk-linux-amd64&quot;\nsudo mv &quot;bazelisk-linux-amd64&quot; /usr/bin/bazelisk\n","title":"Step 3: Download and Set Up Bazelisk","titles":["Build from Source","Linux"]},"57":{"href":"/install/sources#step-4-clone-the-stone-prover-repository","html":"\n<p>Clone the Stone prover repository from GitHub.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/baking-bad/stone-prover.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover</span></span></code></pre>\n","isPage":false,"text":"\nClone the Stone prover repository from GitHub.\ngit clone https://github.com/baking-bad/stone-prover.git /tmp/stone-prover\n","title":"Step 4: Clone the Stone Prover Repository","titles":["Build from Source","Linux"]},"58":{"href":"/install/sources#step-5-navigate-to-the-project-directory","html":"\n<p>Change to the Stone prover project directory.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover</span></span></code></pre>\n","isPage":false,"text":"\nChange to the Stone prover project directory.\ncd /tmp/stone-prover\n","title":"Step 5: Navigate to the Project Directory","titles":["Build from Source","Linux"]},"59":{"href":"/install/sources#step-6-build-the-project-with-bazelisk","html":"\n<p>Build the Stone prover and verifier using Bazelisk. Ensure the architecture is passed correctly.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bazelisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> //...</span></span></code></pre>\n","isPage":false,"text":"\nBuild the Stone prover and verifier using Bazelisk. Ensure the architecture is passed correctly.\nbazelisk build //...\n","title":"Step 6: Build the Project with Bazelisk","titles":["Build from Source","Linux"]},"60":{"href":"/install/sources#step-7-run-tests-with-bazelisk","html":"\n<p>Run the tests to verify the build.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bazelisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> //...</span></span></code></pre>\n","isPage":false,"text":"\nRun the tests to verify the build.\nbazelisk test //...\n","title":"Step 7: Run Tests with Bazelisk","titles":["Build from Source","Linux"]},"61":{"href":"/install/sources#step-8-create-symbolic-links-for-prover-and-verifier","html":"\n<p>To easily access the built prover and verifier binaries, create symbolic links in /usr/local/bin.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ln</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ln</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n","isPage":false,"text":"\nTo easily access the built prover and verifier binaries, create symbolic links in /usr/local/bin.\nln -s /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_prover /usr/local/bin/cpu_air_prover\nln -s /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_verifier /usr/local/bin/cpu_air_verifier\n","title":"Step 8: Create Symbolic Links for Prover and Verifier","titles":["Build from Source","Linux"]},"62":{"href":"/install/sources#step-9-locating-the-built-binaries","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">which</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">which</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpu_air_verifier</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># cpu_air_prover --help</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># cpu_air_verifier --help</span></span></code></pre>\n","isPage":false,"text":"\nwhich cpu_air_prover\nwhich cpu_air_verifier\n# cpu_air_prover --help\n# cpu_air_verifier --help\n","title":"Step 9: Locating the built binaries","titles":["Build from Source","Linux"]},"63":{"href":"/install/sources#macos","html":"\n","isPage":false,"text":"\n","title":"macOS","titles":["Build from Source"]},"64":{"href":"/install/sources#step-1-install-dependencies","html":"\n<p>Homebrew is most likely already installed. If not:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">/bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;$(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -fsSL</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span></code></pre>\n<p>To install the software, you&#x27;ll need the following dependencies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gmp</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> python@3.9</span></span></code></pre>\n","isPage":false,"text":"\nHomebrew is most likely already installed. If not:\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\nTo install the software, you&#x27;ll need the following dependencies:\nbrew install git\nbrew install gmp\nbrew install python@3.9\n","title":"Step 1: Install Dependencies","titles":["Build from Source","macOS"]},"65":{"href":"/install/sources#step-2-install-python-packages-1","html":"\n<p>Install the required Python packages, including specific versions of sympy and cairo-lang, along with cpplint, pytest, and numpy.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">python3</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -m</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pip</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --upgrade</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pip</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># --break-system-packages is specified to avoid issues related to PEP 668 https://peps.python.org/pep-0668/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">python3</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -m</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pip</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpplint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pytest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> numpy</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sympy==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1.12.1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo-lang==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.12.0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --break-system-packages</span></span></code></pre>\n","isPage":false,"text":"\nInstall the required Python packages, including specific versions of sympy and cairo-lang, along with cpplint, pytest, and numpy.\npython3 -m pip install --upgrade pip\n# --break-system-packages is specified to avoid issues related to PEP 668 https://peps.python.org/pep-0668/\npython3 -m pip install cpplint pytest numpy sympy==1.12.1 cairo-lang==0.12.0 --break-system-packages\n","title":"Step 2: Install Python Packages","titles":["Build from Source","macOS"]},"66":{"href":"/install/sources#step-3-install-bazelisk","html":"\n<p>Install the Bazelisk binary to build the stone prover/verifier.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bazelisk</span></span></code></pre>\n","isPage":false,"text":"\nInstall the Bazelisk binary to build the stone prover/verifier.\nbrew install bazelisk\n","title":"Step 3: Install Bazelisk","titles":["Build from Source","macOS"]},"67":{"href":"/install/sources#step-4-clone-the-stone-prover-repository-1","html":"\n<p>Clone the Stone prover repository from GitHub.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/baking-bad/stone-prover.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover</span></span></code></pre>\n","isPage":false,"text":"\nClone the Stone prover repository from GitHub.\ngit clone https://github.com/baking-bad/stone-prover.git /tmp/stone-prover\n","title":"Step 4: Clone the Stone Prover Repository","titles":["Build from Source","macOS"]},"68":{"href":"/install/sources#step-5-navigate-to-the-project-directory-1","html":"\n<p>Change to the Stone prover project directory.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover</span></span></code></pre>\n","isPage":false,"text":"\nChange to the Stone prover project directory.\ncd /tmp/stone-prover\n","title":"Step 5: Navigate to the Project Directory","titles":["Build from Source","macOS"]},"69":{"href":"/install/sources#step-6-build-the-project-with-bazelisk-1","html":"\n<p>Build the Stone prover and verifier using Bazelisk. Ensure the architecture is passed correctly.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bazelisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> //...</span></span></code></pre>\n","isPage":false,"text":"\nBuild the Stone prover and verifier using Bazelisk. Ensure the architecture is passed correctly.\nbazelisk build //...\n","title":"Step 6: Build the Project with Bazelisk","titles":["Build from Source","macOS"]},"70":{"href":"/install/sources#step-7-run-tests-with-bazelisk-1","html":"\n<p>Run the tests to verify the build.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bazelisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> //...</span></span></code></pre>\n","isPage":false,"text":"\nRun the tests to verify the build.\nbazelisk test //...\n","title":"Step 7: Run Tests with Bazelisk","titles":["Build from Source","macOS"]},"71":{"href":"/install/sources#step-8-create-symbolic-links-for-prover-and-verifier-1","html":"\n<p>To easily access the built prover and verifier binaries, create symbolic links in /usr/local/bin.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ln</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ln</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n","isPage":false,"text":"\nTo easily access the built prover and verifier binaries, create symbolic links in /usr/local/bin.\nln -s /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_prover /usr/local/bin/cpu_air_prover\nln -s /tmp/stone-prover/build/bazelbin/src/starkware/main/cpu/cpu_air_verifier /usr/local/bin/cpu_air_verifier\n","title":"Step 8: Create Symbolic Links for Prover and Verifier","titles":["Build from Source","macOS"]},"72":{"href":"/install/sources#step-9-locating-the-built-binaries-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">which</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">which</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cpu_air_verifier</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># cpu_air_prover --help</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># cpu_air_verifier --help</span></span></code></pre>","isPage":false,"text":"\nwhich cpu_air_prover\nwhich cpu_air_verifier\n# cpu_air_prover --help\n# cpu_air_verifier --help","title":"Step 9: Locating the built binaries","titles":["Build from Source","macOS"]},"73":{"href":"/usage/configuration#stone-prover-configuration","html":"\n<p>This guide will explain how to create a configuration file for the Stone prover, focusing on the security settings of the FRI protocol and the format of the configuration file. It also covers detailed instructions on configuring specific parameters for an optimal balance between security and performance.</p>\n","isPage":true,"text":"\nThis guide will explain how to create a configuration file for the Stone prover, focusing on the security settings of the FRI protocol and the format of the configuration file. It also covers detailed instructions on configuring specific parameters for an optimal balance between security and performance.\n","title":"Stone Prover Configuration","titles":[null]},"74":{"href":"/usage/configuration#1-overview-of-the-stone-prover-configuration","html":"\n<p>The Stone Prover Configuration defines the parameters that govern how the Stone prover operates in proving systems based on the STARK protocol. These configurations can significantly affect both the performance and security of the proving and verification processes. The configuration is stored in JSON files, such as <code>cpu_air_params.json</code> and <code>cpu_air_prover_config.json</code>, which allow the user to set up various aspects of the prover and verifier interaction.</p>\n<p>A breakdpwn of key areas in  Stone Prover configuration:</p>\n<strong>i. Field Configuration</strong>\n<p>The field configuration is one of the most fundamental aspects of the proving system, as it defines the arithmetic field in which computations take place.</p>\n<p>Field Type (<code>field</code>): The proving system relies on operations in a specific prime field. This configuration option defines the field. For example:</p>\n<p><code>&quot;field&quot;: &quot;PrimeField0&quot;</code></p>\n<p>In this example, computations are performed in a prime field denoted as <code>PrimeField0</code>.</p>\n<strong>ii. STARK Configuration</strong>\n<p>This section encompasses the STARK-related configurations, which include how the Fast Reed-Solomon Interactive Oracle Proofs of Proximity (FRI) protocol is set up.</p>\n<p>FRI Protocol (<code>fri</code>): The FRI protocol is crucial to the soundness of STARK proofs. It reduces the complexity of the proximity proofs generated by STARK and can be fine-tuned to balance performance and security.</p>\n<p>Step List (<code>fri_step_list</code>): A list that controls the size of the proof at each step of the FRI process. Each number represents the rate at which the proof size decreases in the corresponding step. For instance:</p>\n<p><code>&quot;fri_step_list&quot;: [4, 4, 4, 1]</code></p>\n<p>This configuration defines that the proof size will reduce by a factor of 4 for the first three steps, and by a factor of 1 at the last step.</p>\n<ul>\n<li>\n<p><strong>Last Layer Degree Bound</strong> (<code>last_layer_degree_bound</code>): Specifies the maximum degree of the polynomial at the last layer, ensuring the proof’s accuracy. Example:</p>\n<p><code>&quot;last_layer_degree_bound&quot;: 64</code></p>\n</li>\n<li>\n<p><strong>Number of Queries</strong> (<code>n_queries</code>): Determines the number of proximity queries performed to validate the proof. A higher value increases security but also increases the cost of the verification process.</p>\n<p><code>&quot;n_queries&quot;: 18</code></p>\n</li>\n<li>\n<p><strong>Proof of Work Bits</strong> (<code>proof_of_work_bits</code>): Adds computational complexity for generating proofs to deter brute-force attacks. For example:</p>\n<p><code>&quot;proof_of_work_bits&quot;: 24</code></p>\n</li>\n<li>\n<p><strong>Cosets</strong> (<code>log_n_cosets</code>): This parameter defines how many cosets (subgroups of elements) are involved in the polynomial evaluations of the STARK protocol.</p>\n</li>\n<li>\n<p><strong>Use of Extension Fields</strong> (<code>use_extension_field</code>): In some cases, extension fields may be used to enhance security. Setting this parameter to <code>false</code> disables this feature:</p>\n<p><code>&quot;use_extension_field&quot;: false  </code></p>\n</li>\n</ul>\n<strong>iii.  <strong>Prover Configuration</strong></strong>\n<p>The prover configuration is another critical section that governs how the prover operates during the proof generation phase.</p>\n<ul>\n<li>\n<p><strong>Cached LDE Configuration</strong> (<code>cached_lde_config</code>): LDE (Low Degree Extension) is an important optimization for speeding up polynomial evaluations. The <code>cached_lde_config</code> object holds settings to control whether to store the full LDE and whether to use FFT (Fast Fourier Transform) for evaluations.</p>\n</li>\n<li>\n<p><strong>Store Full LDE</strong> (<code>store_full_lde</code>): If set to <code>true</code>, the full Low Degree Extension is cached, potentially speeding up subsequent operations but using more memory. Example:</p>\n<p><code>&quot;store_full_lde&quot;: false</code></p>\n</li>\n<li>\n<p><strong>Use FFT for Evaluation</strong> (<code>use_fft_for_eval</code>): Determines whether to use FFT to accelerate polynomial evaluations. For example:</p>\n<p><code>&quot;use_fft_for_eval&quot;: false</code></p>\n</li>\n<li>\n<p><strong>Constraint Polynomial Task Size</strong> (<code>constraint_polynomial_task_size</code>): This defines the size of tasks for evaluating constraint polynomials, influencing the prover&#x27;s parallelism.</p>\n<p><code>&quot;constraint_polynomial_task_size&quot;: 256</code></p>\n</li>\n<li>\n<p><strong>Out-of-Memory Merkle Layers</strong> (<code>n_out_of_memory_merkle_layers</code>): This parameter controls the number of Merkle layers that are processed out-of-memory. Increasing this can reduce the memory footprint but may slow down the proving process.</p>\n<p><code>&quot;n_out_of_memory_merkle_layers&quot;: 1</code></p>\n</li>\n<li>\n<p><strong>Table Prover Tasks</strong> (<code>table_prover_n_tasks_per_segment</code>): Specifies the number of tasks assigned to each segment during proof generation. This impacts how the prover workload is distributed.</p>\n<p><code>&quot;table_prover_n_tasks_per_segment&quot;: 32</code></p>\n</li>\n</ul>\n<strong>iv. <strong>Verifier Settings</strong></strong>\n<p>These parameters are often found in configuration files related to the verifier, and they aim to optimize the verification process.</p>\n<ul>\n<li>\n<p><strong>Verifier-Friendly Channel Updates</strong>(<code>verifier_friendly_channel_updates</code>): If true, this option configures the prover to update the verification channel in a way that simplifies verification.</p>\n<p><code>&quot;verifier_friendly_channel_updates&quot;: true</code></p>\n</li>\n<li>\n<p><strong>Verifier-Friendly Commitment Hash</strong> (<code>verifier_friendly_commitment_hash</code>): Specifies the type of hash function used for the verifier&#x27;s commitment, optimized for verification. Example:</p>\n<p><code>&quot;verifier_friendly_commitment_hash&quot;: &quot;poseidon3&quot;</code></p>\n</li>\n</ul>\n<strong>V.  Hash Function</strong>\n<p>Several cryptographic hash functions are utilized in the configuration for security purposes:</p>\n<ul>\n<li>\n<p><strong>Channel Hash</strong> (<code>channel_hash</code>): Specifies the hash function used for secure communication between the prover and verifier. Example:</p>\n<p><code>&quot;channel_hash&quot;: &quot;poseidon3&quot;</code></p>\n</li>\n<li>\n<p><strong>Commitment Hash</strong> (<code>commitment_hash</code>): Hash function used for generating commitments, which are crucial for zero-knowledge proofs.</p>\n<p><code>&quot;commitment_hash&quot;: &quot;keccak256_masked160_lsb&quot;</code></p>\n</li>\n<li>\n<p><strong>Proof-of-Work Hash</strong> (<code>pow_hash</code>): Defines the hash used for proof-of-work, ensuring security in proof generation.</p>\n<p><code>&quot;pow_hash&quot;: &quot;keccak256&quot;</code></p>\n</li>\n</ul>\n","isPage":false,"text":"\nThe Stone Prover Configuration defines the parameters that govern how the Stone prover operates in proving systems based on the STARK protocol. These configurations can significantly affect both the performance and security of the proving and verification processes. The configuration is stored in JSON files, such as cpu_air_params.json and cpu_air_prover_config.json, which allow the user to set up various aspects of the prover and verifier interaction.\nA breakdpwn of key areas in  Stone Prover configuration:\ni. Field Configuration\nThe field configuration is one of the most fundamental aspects of the proving system, as it defines the arithmetic field in which computations take place.\nField Type (field): The proving system relies on operations in a specific prime field. This configuration option defines the field. For example:\n&quot;field&quot;: &quot;PrimeField0&quot;\nIn this example, computations are performed in a prime field denoted as PrimeField0.\nii. STARK Configuration\nThis section encompasses the STARK-related configurations, which include how the Fast Reed-Solomon Interactive Oracle Proofs of Proximity (FRI) protocol is set up.\nFRI Protocol (fri): The FRI protocol is crucial to the soundness of STARK proofs. It reduces the complexity of the proximity proofs generated by STARK and can be fine-tuned to balance performance and security.\nStep List (fri_step_list): A list that controls the size of the proof at each step of the FRI process. Each number represents the rate at which the proof size decreases in the corresponding step. For instance:\n&quot;fri_step_list&quot;: [4, 4, 4, 1]\nThis configuration defines that the proof size will reduce by a factor of 4 for the first three steps, and by a factor of 1 at the last step.\n\n\nLast Layer Degree Bound (last_layer_degree_bound): Specifies the maximum degree of the polynomial at the last layer, ensuring the proof’s accuracy. Example:\n&quot;last_layer_degree_bound&quot;: 64\n\n\nNumber of Queries (n_queries): Determines the number of proximity queries performed to validate the proof. A higher value increases security but also increases the cost of the verification process.\n&quot;n_queries&quot;: 18\n\n\nProof of Work Bits (proof_of_work_bits): Adds computational complexity for generating proofs to deter brute-force attacks. For example:\n&quot;proof_of_work_bits&quot;: 24\n\n\nCosets (log_n_cosets): This parameter defines how many cosets (subgroups of elements) are involved in the polynomial evaluations of the STARK protocol.\n\n\nUse of Extension Fields (use_extension_field): In some cases, extension fields may be used to enhance security. Setting this parameter to false disables this feature:\n&quot;use_extension_field&quot;: false  \n\n\niii.  Prover Configuration\nThe prover configuration is another critical section that governs how the prover operates during the proof generation phase.\n\n\nCached LDE Configuration (cached_lde_config): LDE (Low Degree Extension) is an important optimization for speeding up polynomial evaluations. The cached_lde_config object holds settings to control whether to store the full LDE and whether to use FFT (Fast Fourier Transform) for evaluations.\n\n\nStore Full LDE (store_full_lde): If set to true, the full Low Degree Extension is cached, potentially speeding up subsequent operations but using more memory. Example:\n&quot;store_full_lde&quot;: false\n\n\nUse FFT for Evaluation (use_fft_for_eval): Determines whether to use FFT to accelerate polynomial evaluations. For example:\n&quot;use_fft_for_eval&quot;: false\n\n\nConstraint Polynomial Task Size (constraint_polynomial_task_size): This defines the size of tasks for evaluating constraint polynomials, influencing the prover&#x27;s parallelism.\n&quot;constraint_polynomial_task_size&quot;: 256\n\n\nOut-of-Memory Merkle Layers (n_out_of_memory_merkle_layers): This parameter controls the number of Merkle layers that are processed out-of-memory. Increasing this can reduce the memory footprint but may slow down the proving process.\n&quot;n_out_of_memory_merkle_layers&quot;: 1\n\n\nTable Prover Tasks (table_prover_n_tasks_per_segment): Specifies the number of tasks assigned to each segment during proof generation. This impacts how the prover workload is distributed.\n&quot;table_prover_n_tasks_per_segment&quot;: 32\n\n\niv. Verifier Settings\nThese parameters are often found in configuration files related to the verifier, and they aim to optimize the verification process.\n\n\nVerifier-Friendly Channel Updates(verifier_friendly_channel_updates): If true, this option configures the prover to update the verification channel in a way that simplifies verification.\n&quot;verifier_friendly_channel_updates&quot;: true\n\n\nVerifier-Friendly Commitment Hash (verifier_friendly_commitment_hash): Specifies the type of hash function used for the verifier&#x27;s commitment, optimized for verification. Example:\n&quot;verifier_friendly_commitment_hash&quot;: &quot;poseidon3&quot;\n\n\nV.  Hash Function\nSeveral cryptographic hash functions are utilized in the configuration for security purposes:\n\n\nChannel Hash (channel_hash): Specifies the hash function used for secure communication between the prover and verifier. Example:\n&quot;channel_hash&quot;: &quot;poseidon3&quot;\n\n\nCommitment Hash (commitment_hash): Hash function used for generating commitments, which are crucial for zero-knowledge proofs.\n&quot;commitment_hash&quot;: &quot;keccak256_masked160_lsb&quot;\n\n\nProof-of-Work Hash (pow_hash): Defines the hash used for proof-of-work, ensuring security in proof generation.\n&quot;pow_hash&quot;: &quot;keccak256&quot;\n\n\n","title":"1. Overview of the Stone Prover Configuration","titles":[null,"Stone Prover Configuration"]},"75":{"href":"/usage/configuration#2-security-settings-fof-the-fri-protocol","html":"\n<p>In the context of the <code>STARK</code> proof system, the FRI (Fast Reed-Solomon Interactive Oracle Proofs of Proximity) protocol is an essential part of ensuring the soundness of the proof by reducing the proximity query overhead. Key security settings related to FRI are:</p>\n<ul>\n<li>\n<p><code>fri_step_list</code>: This list defines the step sizes used in FRI, where each entry specifies the reduction rate in proof size at each FRI layer. Larger numbers indicate fewer layers but bigger proofs. For example:</p>\n<p><code>&quot;fri_step_list&quot;: [4, 4, 4, 1]</code></p>\n</li>\n</ul>\n<p>This shows that in the first three layers, the proof size reduces by a factor of 4, and in the final layer by a factor of 1.</p>\n<ul>\n<li>\n<p><code>last_layer_degree_bound</code>: This parameter represents the maximum degree of the polynomial in the last layer. Setting this value helps in bounding the error probability. For example:</p>\n<p><code>&quot;last_layer_degree_bound&quot;: 64</code></p>\n</li>\n<li>\n<p><code>n_queries</code>: This is the number of proximity queries performed in the proof to ensure correctness. Higher values increase security at the cost of efficiency. For Example:</p>\n<p><code>&quot;n_queries&quot;: 18</code></p>\n</li>\n<li>\n<p><code>proof_of_work_bits</code>: This determines the computational difficulty of proof generation, acting as a deterrent against brute force attacks. For example:</p>\n<p><code>&quot;proof_of_work_bits&quot;: 24</code></p>\n</li>\n</ul>\n","isPage":false,"text":"\nIn the context of the STARK proof system, the FRI (Fast Reed-Solomon Interactive Oracle Proofs of Proximity) protocol is an essential part of ensuring the soundness of the proof by reducing the proximity query overhead. Key security settings related to FRI are:\n\n\nfri_step_list: This list defines the step sizes used in FRI, where each entry specifies the reduction rate in proof size at each FRI layer. Larger numbers indicate fewer layers but bigger proofs. For example:\n&quot;fri_step_list&quot;: [4, 4, 4, 1]\n\n\nThis shows that in the first three layers, the proof size reduces by a factor of 4, and in the final layer by a factor of 1.\n\n\nlast_layer_degree_bound: This parameter represents the maximum degree of the polynomial in the last layer. Setting this value helps in bounding the error probability. For example:\n&quot;last_layer_degree_bound&quot;: 64\n\n\nn_queries: This is the number of proximity queries performed in the proof to ensure correctness. Higher values increase security at the cost of efficiency. For Example:\n&quot;n_queries&quot;: 18\n\n\nproof_of_work_bits: This determines the computational difficulty of proof generation, acting as a deterrent against brute force attacks. For example:\n&quot;proof_of_work_bits&quot;: 24\n\n\n","title":"2. Security Settings fof the FRI Protocol","titles":[null,"Stone Prover Configuration"]},"76":{"href":"/usage/configuration#3-configuration-file-format","html":"\n<p>The configuration file typically contains parameters that define how the prover and verifier should function in a STARK system, with particular focus on FRI parameters. Here are key sections in the configuration files, as observed from your examples:</p>\n<p>Example Structure (<code>cpu_air_params.json</code>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;field&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PrimeField0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;stark&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;fri&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;fri_step_list&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;last_layer_degree_bound&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;n_queries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;proof_of_work_bits&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">24</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;log_n_cosets&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;use_extension_field&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ul>\n<li>\n<p><code>field</code>: Specifies the type of prime field used in computations (e.g., PrimeField0).</p>\n</li>\n<li>\n<p><code>stark</code>: Contains the main STARK settings.</p>\n<ul>\n<li>\n<p><code>fri</code>: Includes all the FRI-related configurations (described above).</p>\n</li>\n<li>\n<p><code>log_n_cosets</code>: Determines the number of cosets (subgroups of elements) involved in polynomial evaluation. Example:</p>\n</li>\n</ul>\n<p><code>&quot;log_n_cosets&quot;: 4</code></p>\n</li>\n<li>\n<p><code>use_extension_field</code>: Indicates whether or not to use an extension field for higher security. Example:</p>\n<p><code>&quot;use_extension_field&quot;: false</code></p>\n</li>\n</ul>\n<p>Example Structure (<code>cpu_air_prover_config.json</code>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;cached_lde_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;store_full_lde&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;use_fft_for_eval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;constraint_polynomial_task_size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;n_out_of_memory_merkle_layers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;table_prover_n_tasks_per_segment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ul>\n<li>\n<p><code>cached_lde_config</code>: Configures caching for Low Degree Extension (LDE).</p>\n<ul>\n<li><code>store_full_lde</code>: If <code>true</code>, the full LDE will be stored for later use. Example:</li>\n</ul>\n<p><code>&quot;store_full_lde&quot;</code>: false</p>\n<ul>\n<li><code>use_fft_for_eval</code>: Determines if FFT (Fast Fourier Transform) should be used for evaluation. Example:</li>\n</ul>\n<p><code>&quot;use_fft_for_eval&quot;: false</code></p>\n</li>\n<li>\n<p><code>constraint_polynomial_task_size</code>: Defines the task size for constraint polynomial evaluation. Example:</p>\n<p><code>&quot;constraint_polynomial_task_size&quot;: 256</code></p>\n</li>\n<li>\n<p><code>n_out_of_memory_merkle_layers</code>: Specifies the number of Merkle layers processed out of memory to reduce computational load. Example:</p>\n<p><code>&quot;n_out_of_memory_merkle_layers&quot;: 1</code></p>\n</li>\n<li>\n<p><code>table_prover_n_tasks_per_segment</code>: Defines the number of tasks assigned per table segment during proving. Example:</p>\n<p><code>&quot;table_prover_n_tasks_per_segment&quot;: 32</code></p>\n</li>\n</ul>\n<strong>3.1 How to Create a Configuration File</strong>\n<p>creating a configuration file for a Stone Prover, follow these steps:</p>\n<p>i.  Step 1: Define the basic STARK settings, focusing on the FRI protocol configurations. Start by deciding on <code>fri_step_list</code>, <code>last_layer_degree_bound</code>, <code>n_queries</code>, and <code>proof_of_work_bits</code> based on your security requirements.</p>\n<p>ii. Step 2: Specify additional fields like <code>log_n_cosets</code> and <code>use_extension_field</code> based on whether you&#x27;re using an extension field for added security.</p>\n<p>iii.  Step 3: For prover-specific settings (as shown in <code>cpu_air_prover_config.json</code>), decide on the task size for constraint polynomial evaluations, whether to store the full LDE, and how many tasks are assigned per segment.</p>\n<p>iv. Step 4: Save the configuration file in a <code>.json</code> format, adhering to the structure outlined above.\nExample of a custom Configuration File:</p>\n<strong>3.2 Example of a Configuration File</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;field&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PrimeField0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;stark&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;fri&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;fri_step_list&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;last_layer_degree_bound&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;n_queries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;proof_of_work_bits&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">24</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;log_n_cosets&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;use_extension_field&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;cached_lde_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;store_full_lde&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;use_fft_for_eval&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;constraint_polynomial_task_size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;n_out_of_memory_merkle_layers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">&quot;table_prover_n_tasks_per_segment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nThe configuration file typically contains parameters that define how the prover and verifier should function in a STARK system, with particular focus on FRI parameters. Here are key sections in the configuration files, as observed from your examples:\nExample Structure (cpu_air_params.json)\n{\n    &quot;field&quot;: &quot;PrimeField0&quot;,\n    &quot;stark&quot;: {\n        &quot;fri&quot;: {\n            &quot;fri_step_list&quot;: [4, 4, 4, 1],\n            &quot;last_layer_degree_bound&quot;: 64,\n            &quot;n_queries&quot;: 18,\n            &quot;proof_of_work_bits&quot;: 24\n        },\n        &quot;log_n_cosets&quot;: 4\n    },\n    &quot;use_extension_field&quot;: false\n}\n\n\nfield: Specifies the type of prime field used in computations (e.g., PrimeField0).\n\n\nstark: Contains the main STARK settings.\n\n\nfri: Includes all the FRI-related configurations (described above).\n\n\nlog_n_cosets: Determines the number of cosets (subgroups of elements) involved in polynomial evaluation. Example:\n\n\n&quot;log_n_cosets&quot;: 4\n\n\nuse_extension_field: Indicates whether or not to use an extension field for higher security. Example:\n&quot;use_extension_field&quot;: false\n\n\nExample Structure (cpu_air_prover_config.json)\n{\n    &quot;cached_lde_config&quot;: {\n        &quot;store_full_lde&quot;: false,\n        &quot;use_fft_for_eval&quot;: false\n    },\n    &quot;constraint_polynomial_task_size&quot;: 256,\n    &quot;n_out_of_memory_merkle_layers&quot;: 1,\n    &quot;table_prover_n_tasks_per_segment&quot;: 32\n}\n\n\ncached_lde_config: Configures caching for Low Degree Extension (LDE).\n\nstore_full_lde: If true, the full LDE will be stored for later use. Example:\n\n&quot;store_full_lde&quot;: false\n\nuse_fft_for_eval: Determines if FFT (Fast Fourier Transform) should be used for evaluation. Example:\n\n&quot;use_fft_for_eval&quot;: false\n\n\nconstraint_polynomial_task_size: Defines the task size for constraint polynomial evaluation. Example:\n&quot;constraint_polynomial_task_size&quot;: 256\n\n\nn_out_of_memory_merkle_layers: Specifies the number of Merkle layers processed out of memory to reduce computational load. Example:\n&quot;n_out_of_memory_merkle_layers&quot;: 1\n\n\ntable_prover_n_tasks_per_segment: Defines the number of tasks assigned per table segment during proving. Example:\n&quot;table_prover_n_tasks_per_segment&quot;: 32\n\n\n3.1 How to Create a Configuration File\ncreating a configuration file for a Stone Prover, follow these steps:\ni.  Step 1: Define the basic STARK settings, focusing on the FRI protocol configurations. Start by deciding on fri_step_list, last_layer_degree_bound, n_queries, and proof_of_work_bits based on your security requirements.\nii. Step 2: Specify additional fields like log_n_cosets and use_extension_field based on whether you&#x27;re using an extension field for added security.\niii.  Step 3: For prover-specific settings (as shown in cpu_air_prover_config.json), decide on the task size for constraint polynomial evaluations, whether to store the full LDE, and how many tasks are assigned per segment.\niv. Step 4: Save the configuration file in a .json format, adhering to the structure outlined above.\nExample of a custom Configuration File:\n3.2 Example of a Configuration File\n{\n&quot;field&quot;: &quot;PrimeField0&quot;,\n&quot;stark&quot;: {\n    &quot;fri&quot;: {\n        &quot;fri_step_list&quot;: [4, 4, 4, 1],\n        &quot;last_layer_degree_bound&quot;: 64,\n        &quot;n_queries&quot;: 18,\n        &quot;proof_of_work_bits&quot;: 24\n    },\n    &quot;log_n_cosets&quot;: 4\n},\n&quot;use_extension_field&quot;: false,\n&quot;cached_lde_config&quot;: {\n    &quot;store_full_lde&quot;: false,\n    &quot;use_fft_for_eval&quot;: false\n},\n&quot;constraint_polynomial_task_size&quot;: 256,\n&quot;n_out_of_memory_merkle_layers&quot;: 1,\n&quot;table_prover_n_tasks_per_segment&quot;: 32\n}","title":"3. Configuration File Format","titles":[null,"Stone Prover Configuration"]},"77":{"href":"/usage/execution#executing-cairo-program-to-obtain-execution-trace-memory-and-air-inputs","html":"</header>\n<p>This document guides the user through installing and running Cairo programs to obtain execution traces, memory and AIR inputs, as well as creating and verifying tests.</p>\n","isPage":true,"text":"\nThis document guides the user through installing and running Cairo programs to obtain execution traces, memory and AIR inputs, as well as creating and verifying tests.\n","title":"Executing cairo program to obtain execution trace, memory, and AIR inputs","titles":[]},"78":{"href":"/usage/execution#installing-rust","html":"\n<p>In order to run the program you need to install Rust. Follow the instructions on the official website <a href=\"https://www.rust-lang.org/tools/install\">here</a>.</p>\n","isPage":false,"text":"\nIn order to run the program you need to install Rust. Follow the instructions on the official website here.\n","title":"Installing Rust","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"79":{"href":"/usage/execution#installing-corelib","html":"\n<p>If you have Scarb installed in your system, you can omit this first step. Since you already have the Cairo repository in your system. Otherwise follow all these steps.</p>\n<p><strong>1.</strong> First you need to clone the Cairo repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --depth=1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -b</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> v2.8.0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/starkware-libs/cairo.git</span></span></code></pre>\n<p><strong>2.</strong> Second, you have to move the corelib from the cloned repository to your current path.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ln</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">path-to-cair</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">o</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/corelib</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> corelib</span></span></code></pre>\n","isPage":false,"text":"\nIf you have Scarb installed in your system, you can omit this first step. Since you already have the Cairo repository in your system. Otherwise follow all these steps.\n1. First you need to clone the Cairo repository:\ngit clone --depth=1 -b v2.8.0 https://github.com/starkware-libs/cairo.git\n2. Second, you have to move the corelib from the cloned repository to your current path.\nln -s &lt;path-to-cairo&gt;/corelib corelib\n","title":"Installing corelib","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"80":{"href":"/usage/execution#installing-cairo1-run","html":"\n<p>To install <code>cairo1-run</code> run the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/lambdaclass/cairo-vm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo1-run</span></span></code></pre>\n","isPage":false,"text":"\nTo install cairo1-run run the following command:\ncargo install --git https://github.com/lambdaclass/cairo-vm cairo1-run\n","title":"Installing cairo1-run","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"81":{"href":"/usage/execution#installing-cairo1-run-from-sources","html":"\n<p>If you prefer to install it from sources you can follow these steps:</p>\n<p>Clone the repo:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/lambdaclass/cairo-vm.git</span></span></code></pre>\n<p>Move inside of the cairo1-run directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo-vm/cairo1-run</span></span></code></pre>\n<p>Run makefile:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">make</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> deps</span></span></code></pre>\n","isPage":false,"text":"\nIf you prefer to install it from sources you can follow these steps:\nClone the repo:\ngit clone https://github.com/lambdaclass/cairo-vm.git\nMove inside of the cairo1-run directory:\ncd cairo-vm/cairo1-run\nRun makefile:\nmake deps\n","title":"Installing cairo1-run from sources","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs","Installing cairo1-run"]},"82":{"href":"/usage/execution#running-cairo1-run-in-a-scarb-project","html":"\n<p>As cairo1-run skips gas checks when running, you will need to add the following to your Scarb.toml to ensure that compilation is done without adding gas checks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cairo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">enable-gas = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span></code></pre>\n<p>Then you can compile your project with <code>scarb build</code></p>\n<p>Then run the compiled project&#x27;s sierra file located at <code>project_name/target/project_name.sierra.json</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> path-to-project/target/project_name.sierra.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span></code></pre>\n","isPage":false,"text":"\nAs cairo1-run skips gas checks when running, you will need to add the following to your Scarb.toml to ensure that compilation is done without adding gas checks:\n[cairo]\nenable-gas = false\nThen you can compile your project with scarb build\nThen run the compiled project&#x27;s sierra file located at project_name/target/project_name.sierra.json:\n  cargo run path-to-project/target/project_name.sierra.json \n","title":"Running cairo1-run in a Scarb project","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"83":{"href":"/usage/execution#creating-and-verifying-a-proof-of-a-cairo-program","html":"\n<p>Navigate to the example test directory (<code>e2e_test/Cairo</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> e2e_test/Cairo</span></span></code></pre>\n<p>Compile and run the program to generate the prover input files:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cairo1-run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci.cairo</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --layout=small</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --air_public_input=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --air_private_input=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --trace_file=fibonacci_trace.bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --memory_file=fibonacci_memory.bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --proof_mode</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --args_file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> file_to_be_included_here.txt</span></span></code></pre>\n<p>Replace <code>file_to_be_included_here.txt</code> with the name of the file you want to include. Another thing to add here.\nIs that we can use <code>args_file</code> as an arguments as well as just <code>args</code>. Example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cairo1-run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci.cairo</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --layout=small</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --air_public_input=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --air_private_input=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --trace_file=fibonacci_trace.bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --memory_file=fibonacci_memory.bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --proof_mode</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --args</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;[1 2 300]&quot;</span></span></code></pre>\n<p>Run the prover:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=../../cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=../../cpu_air_params.json</span></span></code></pre>\n<p>The proof is now available in the file <code>fibonacci_proof.json</code>.</p>\n<p>Finally, run the verifier to verify the proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n<p><strong>Note</strong>: The verifier only checks that the proof is consistent with the public input section that appears in the proof file. The public input section itself is not checked. For example, the verifier does not check what Cairo program is being proved, or that the builtins memory segments are of valid size. These things need to be checked externally.</p>\n","isPage":false,"text":"\nNavigate to the example test directory (e2e_test/Cairo):\ncd e2e_test/Cairo\nCompile and run the program to generate the prover input files:\ncairo1-run fibonacci.cairo \\\n    --layout=small \\\n    --air_public_input=fibonacci_public_input.json \\\n    --air_private_input=fibonacci_private_input.json \\\n    --trace_file=fibonacci_trace.bin \\\n    --memory_file=fibonacci_memory.bin \\\n    --proof_mode \\\n    --args_file file_to_be_included_here.txt\nReplace file_to_be_included_here.txt with the name of the file you want to include. Another thing to add here.\nIs that we can use args_file as an arguments as well as just args. Example:\ncairo1-run fibonacci.cairo \\\n    --layout=small \\\n    --air_public_input=fibonacci_public_input.json \\\n    --air_private_input=fibonacci_private_input.json \\\n    --trace_file=fibonacci_trace.bin \\\n    --memory_file=fibonacci_memory.bin \\\n    --proof_mode \\\n    --args &quot;[1 2 300]&quot;\nRun the prover:\ncpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=../../cpu_air_prover_config.json \\\n    --parameter_file=../../cpu_air_params.json\nThe proof is now available in the file fibonacci_proof.json.\nFinally, run the verifier to verify the proof:\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\nNote: The verifier only checks that the proof is consistent with the public input section that appears in the proof file. The public input section itself is not checked. For example, the verifier does not check what Cairo program is being proved, or that the builtins memory segments are of valid size. These things need to be checked externally.\n","title":"Creating and verifying a proof of a Cairo program","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"84":{"href":"/usage/execution#cli-argument-list","html":"\n<p>The cairo1-run cli supports the following optional arguments:</p>\n<ul>\n<li>\n<p><code>--layout all_cairo</code>: Sets the layout for the cairo_run. This will limit the available builtins. The deafult layout is <code>plain</code>, which has no builtins. For general purpose, the <code>all_cairo</code> layout contains all currently available builtins.</p>\n</li>\n<li>\n<p><code>--args &lt;ARGUMENTS&gt;</code>: Receives the arguments to be passed to the program&#x27;s main function. Receives whitespace-separated values which can be numbers or arrays, with arrays consisting of whitespace-separated numbers wrapped between brackets</p>\n</li>\n<li>\n<p><code>--args_file &lt;FILENAME&gt;</code>: Receives the name of the file from where arguments should be read. Expects the same argument format of the <code>--args</code> flag. Should be used if the list of arguments exceeds the shell&#x27;s capacity.</p>\n</li>\n<li>\n<p><code>--trace_file &lt;TRACE_FILE&gt;</code>: Receives the name of a file and outputs the relocated trace into it</p>\n</li>\n<li>\n<p><code>--memory_file &lt;MEMORY_FILE&gt;</code>: Receives the name of a file and outputs the relocated memory into it</p>\n</li>\n<li>\n<p><code>--proof_mode</code>: Runs the program in proof_mode. Only allows <code>Array&lt;felt252&gt;</code> as return and input value.</p>\n</li>\n<li>\n<p><code>--air_public_input &lt;AIR_PUBLIC_INPUT&gt;</code>: Receives the name of a file and outputs the AIR public inputs into it. Can only be used if proof_mode is also enabled.</p>\n</li>\n<li>\n<p><code>--air_private_input &lt;AIR_PRIVATE_INPUT&gt;</code>: Receives the name of a file and outputs the AIR private inputs into it. Can only be used if proof_mode, trace_file &amp; memory_file are also enabled.</p>\n</li>\n<li>\n<p><code>--cairo_pie_output &lt;CAIRO_PIE_OUTPUT&gt;</code>: Receives the name of a file and outputs the Cairo PIE into it. Can only be used if proof_mode, is not enabled.</p>\n</li>\n<li>\n<p><code>--append_return_values</code>: Adds extra instructions to the program in order to append the return and input values to the output builtin&#x27;s segment. This is the default behaviour for proof_mode. Only allows <code>Array&lt;felt252&gt;</code> as return and input value.</p>\n</li>\n</ul>\n","isPage":false,"text":"\nThe cairo1-run cli supports the following optional arguments:\n\n\n--layout all_cairo: Sets the layout for the cairo_run. This will limit the available builtins. The deafult layout is plain, which has no builtins. For general purpose, the all_cairo layout contains all currently available builtins.\n\n\n--args &lt;ARGUMENTS&gt;: Receives the arguments to be passed to the program&#x27;s main function. Receives whitespace-separated values which can be numbers or arrays, with arrays consisting of whitespace-separated numbers wrapped between brackets\n\n\n--args_file &lt;FILENAME&gt;: Receives the name of the file from where arguments should be read. Expects the same argument format of the --args flag. Should be used if the list of arguments exceeds the shell&#x27;s capacity.\n\n\n--trace_file &lt;TRACE_FILE&gt;: Receives the name of a file and outputs the relocated trace into it\n\n\n--memory_file &lt;MEMORY_FILE&gt;: Receives the name of a file and outputs the relocated memory into it\n\n\n--proof_mode: Runs the program in proof_mode. Only allows Array&lt;felt252&gt; as return and input value.\n\n\n--air_public_input &lt;AIR_PUBLIC_INPUT&gt;: Receives the name of a file and outputs the AIR public inputs into it. Can only be used if proof_mode is also enabled.\n\n\n--air_private_input &lt;AIR_PRIVATE_INPUT&gt;: Receives the name of a file and outputs the AIR private inputs into it. Can only be used if proof_mode, trace_file &amp; memory_file are also enabled.\n\n\n--cairo_pie_output &lt;CAIRO_PIE_OUTPUT&gt;: Receives the name of a file and outputs the Cairo PIE into it. Can only be used if proof_mode, is not enabled.\n\n\n--append_return_values: Adds extra instructions to the program in order to append the return and input values to the output builtin&#x27;s segment. This is the default behaviour for proof_mode. Only allows Array&lt;felt252&gt; as return and input value.\n\n\n","title":"CLI argument list","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"85":{"href":"/usage/execution#additional-resources","html":"\n<p><strong>1.</strong> The <a href=\"https://github.com/lambdaclass/cairo-vm\">cairo-vm</a>\n<strong>2.</strong> The <a href=\"https://github.com/starkware-libs/stone-prover\">Stone Prover</a>\n<strong>3.</strong> The <a href=\"https://github.com/lambdaclass/cairo-vm/tree/main/cairo1-run\">cairo1-run</a>\n<strong>4.</strong> The <a href=\"https://book.cairo-lang.org/title-page.html\">Cairo Book</a></p>","isPage":false,"text":"\n1. The cairo-vm\n2. The Stone Prover\n3. The cairo1-run\n4. The Cairo Book","title":"Additional resources","titles":["Executing cairo program to obtain execution trace, memory, and AIR inputs"]},"86":{"href":"/usage/proving#creating-and-verifying-a-proof-running-stone-prover","html":"</header>\n<p>This guide provides step-by-step instructions on how to use the Stone Prover to create and verify proofs for Cairo programs.This guide is based on the official <a href=\"https://github.com/starkware-libs/stone-prover?tab=readme-ov-file#creating-and-verifying-a-proof-of-a-cairo-program\">Stone Prover documentation</a>.</p>\n","isPage":true,"text":"\nThis guide provides step-by-step instructions on how to use the Stone Prover to create and verify proofs for Cairo programs.This guide is based on the official Stone Prover documentation.\n","title":"Creating and verifying a proof Running Stone Prover","titles":[]},"87":{"href":"/usage/proving#creating-and-verifying-a-proof","html":"\n<p>To create and verify a proof using Stone Prover, follow these steps:</p>\n<ul>\n<li>Clone/download the repository:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ul>\n<li>Navigate to the example test directory</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<ul>\n<li>Download or Copy the Binary Files:</li>\n</ul>\n<p>To download binaries, please refer to the <a href=\"../install/binaries.md\">Installation Guide</a></p>\n<ul>\n<li>Run the prover to generate a proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params.json</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<ul>\n<li>Run the verifier to verify the proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\nTo create and verify a proof using Stone Prover, follow these steps:\n\nClone/download the repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nNavigate to the example test directory\n\ncd /tmp/stone-packaging/test_files/\n\nDownload or Copy the Binary Files:\n\nTo download binaries, please refer to the Installation Guide\n\nRun the prover to generate a proof:\n\ncpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json\nThe proof will be available at fibonacci_proof.json.\n\nRun the verifier to verify the proof:\n\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Creating and Verifying a Proof","titles":["Creating and verifying a proof Running Stone Prover"]},"88":{"href":"/usage/proving#download-minimal-docker-images-for-x86_64","html":"\n<p>Download the Docker image. The stone-prover package includes both <code>cpu_air_prover</code> and <code>cpu_air_verifier</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:latest</span></span></code></pre>\n","isPage":false,"text":"\nDownload the Docker image. The stone-prover package includes both cpu_air_prover and cpu_air_verifier:\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:latest\n","title":"Download Minimal Docker Images for x86_64","titles":["Creating and verifying a proof Running Stone Prover"]},"89":{"href":"/usage/proving#creating-and-verifying-a-test-proof-using-docker","html":"\n<ul>\n<li>First, ensure Docker is installed on your machine. For installation instructions, check <a href=\"https://docs.docker.com/get-docker/\">Docker’s official documentation</a></li>\n</ul>\n<ol>\n<li>Clone the Repository:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the Docker Container to generate the Proof</li>\n</ol>\n<p>Run the container with a volume mounted to the local repository directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_prover </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --out_file=fibonacci_proof.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --private_input_file=fibonacci_private_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --public_input_file=fibonacci_public_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --prover_config_file=cpu_air_prover_config.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --parameter_file=cpu_air_params.json&quot;</span></span></code></pre>\n<p>The proof will be created at <code>test_files/fibonacci_proof.json.</code>.</p>\n<ol start=\"3\">\n<li>Run the verifier to validate the Proof Using Docker</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;</span></span></code></pre>","isPage":false,"text":"\n\nFirst, ensure Docker is installed on your machine. For installation instructions, check Docker’s official documentation\n\n\nClone the Repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nRun the Docker Container to generate the Proof\n\nRun the container with a volume mounted to the local repository directory:\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json&quot;\nThe proof will be created at test_files/fibonacci_proof.json..\n\nRun the verifier to validate the Proof Using Docker\n\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;","title":"Creating and Verifying a Test Proof Using Docker","titles":["Creating and verifying a proof Running Stone Prover"]},"90":{"href":"/usage/verifying#verifying-stone-proof-using-the-binary","html":"</header>\n<p>This guide will walk you through how to verify a Stone proof using the provided binaries. It includes steps for both setting up the environment using Docker and manually installing the required dependencies.</p>\n","isPage":true,"text":"\nThis guide will walk you through how to verify a Stone proof using the provided binaries. It includes steps for both setting up the environment using Docker and manually installing the required dependencies.\n","title":"Verifying Stone Proof Using the Binary","titles":[]},"91":{"href":"/usage/verifying#creating-and-verifying-a-test-proof-using-binaries","html":"\n<ul>\n<li>Clone the repository:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ul>\n<li>Navigate to the example test directory</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<ul>\n<li>Download the Binary Files:</li>\n</ul>\n<p>To download binaries, please refer to the <a href=\"../install/binaries.md\">Installation Guide</a></p>\n<ul>\n<li>Run the prover:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params.json</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<ul>\n<li>Run the verifier to verify the proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\n\nClone the repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nNavigate to the example test directory\n\ncd /tmp/stone-packaging/test_files/\n\nDownload the Binary Files:\n\nTo download binaries, please refer to the Installation Guide\n\nRun the prover:\n\ncpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json\nThe proof will be available at fibonacci_proof.json.\n\nRun the verifier to verify the proof:\n\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Creating and Verifying a Test Proof Using Binaries","titles":["Verifying Stone Proof Using the Binary"]},"92":{"href":"/usage/verifying#download-minimal-docker-images-for-x86_64","html":"\n<p>Download the Docker image. The stone-prover package includes both <code>cpu_air_prover</code> and <code>cpu_air_verifier</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:latest</span></span></code></pre>\n","isPage":false,"text":"\nDownload the Docker image. The stone-prover package includes both cpu_air_prover and cpu_air_verifier:\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:latest\n","title":"Download Minimal Docker Images for x86_64","titles":["Verifying Stone Proof Using the Binary"]},"93":{"href":"/usage/verifying#creating-and-verifying-a-test-proof-using-docker","html":"\n<ul>\n<li>Ensure Docker is installed on your machine. You can refer to <a href=\"https://docs.docker.com/get-docker/\">Docker’s official documentation</a> for installation instructions.</li>\n</ul>\n<ol>\n<li>Clone the Repository:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the Docker Container to Create the Proof</li>\n</ol>\n<p>Run the container with a volume mounted to the local repository directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_prover </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --out_file=fibonacci_proof.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --private_input_file=fibonacci_private_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --public_input_file=fibonacci_public_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --prover_config_file=cpu_air_prover_config.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --parameter_file=cpu_air_params.json&quot;</span></span></code></pre>\n<p>The proof will be created at <code>test_files/fibonacci_proof.json.</code>.</p>\n<ol start=\"3\">\n<li>Verify the Proof Using Docker</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;</span></span></code></pre>","isPage":false,"text":"\n\nEnsure Docker is installed on your machine. You can refer to Docker’s official documentation for installation instructions.\n\n\nClone the Repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nRun the Docker Container to Create the Proof\n\nRun the container with a volume mounted to the local repository directory:\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json&quot;\nThe proof will be created at test_files/fibonacci_proof.json..\n\nVerify the Proof Using Docker\n\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;","title":"Creating and Verifying a Test Proof Using Docker","titles":["Verifying Stone Proof Using the Binary"]}},"dirtCount":0,"index":[["just",{"2":{"83":1}}],["js",{"2":{"32":1}}],["json",{"2":{"3":1,"11":4,"12":3,"13":6,"16":2,"22":7,"26":5,"28":2,"32":2,"74":3,"76":4,"82":2,"83":11,"87":7,"89":7,"91":7,"93":7}}],["=",{"2":{"82":1}}],["knowledge",{"2":{"74":1}}],["key",{"2":{"74":1,"75":1,"76":1}}],["keccak256",{"2":{"74":2}}],["keccak",{"2":{"33":5}}],["keeps",{"2":{"3":1}}],["query",{"2":{"75":1}}],["queries",{"2":{"74":4,"75":3,"76":3}}],["quot",{"2":{"3":2,"22":2,"39":2,"56":6,"64":2,"74":42,"75":8,"76":78,"83":4,"87":2,"89":4,"91":2,"93":4}}],["$",{"2":{"64":1}}],["$path",{"2":{"39":1}}],["9",{"0":{"62":1,"72":1},"2":{"64":1}}],["8",{"0":{"61":1,"71":1},"2":{"79":1}}],["y",{"2":{"54":1}}],["your",{"0":{"31":1},"2":{"29":1,"30":3,"31":1,"34":1,"37":1,"38":1,"39":5,"54":1,"76":2,"79":3,"82":2,"89":1,"93":1}}],["you",{"2":{"3":5,"6":2,"19":2,"23":1,"27":1,"30":1,"31":1,"32":1,"33":3,"37":1,"38":1,"39":2,"40":3,"50":1,"64":1,"76":1,"78":1,"79":5,"81":2,"82":2,"83":1,"90":1,"93":1}}],["~",{"2":{"39":4}}],["zero",{"2":{"74":1}}],["zsh",{"2":{"39":2}}],["zshrc",{"2":{"39":3}}],["zksecurity",{"2":{"15":1}}],["+x",{"2":{"37":2,"38":2}}],["x86",{"0":{"38":1,"88":1,"92":1},"2":{"35":1,"38":2,"43":2,"44":1}}],["x27",{"2":{"0":1,"2":1,"30":2,"32":1,"33":5,"40":1,"64":1,"74":2,"76":1,"82":1,"84":3,"89":2,"93":2}}],["668",{"2":{"65":1}}],["64",{"0":{"38":1,"88":1,"92":1},"2":{"35":1,"38":2,"43":2,"44":1,"74":1,"75":1,"76":2}}],["6",{"0":{"59":1,"69":1},"2":{"17":1}}],["5",{"0":{"58":1,"68":1},"2":{"17":1}}],["512",{"2":{"6":1}}],["4",{"0":{"57":1,"67":1},"2":{"17":1,"74":4,"75":4,"76":10,"85":1}}],["0668",{"2":{"65":1}}],["04",{"2":{"42":1}}],["0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a",{"2":{"33":2}}],["0x70997970c51812dc3a010c7d01b50e0d17dc79c8",{"2":{"17":1}}],["0",{"2":{"17":3,"55":1,"56":1,"65":1,"79":1}}],["🥳",{"2":{"17":1}}],["300",{"2":{"83":1}}],["32",{"2":{"74":1,"76":3}}],["3",{"0":{"13":1,"17":1,"56":1,"66":1,"76":1},"2":{"17":1,"64":1,"76":3,"85":1}}],["256",{"2":{"74":1,"76":3}}],["252",{"2":{"6":1}}],["24",{"2":{"74":1,"75":1,"76":2}}],["248",{"2":{"33":2}}],["20",{"2":{"56":1}}],["22",{"2":{"42":1}}],["2",{"0":{"12":1,"16":1,"44":1,"55":1,"65":1,"75":1},"2":{"17":2,"76":2,"79":1,"83":1,"85":1}}],["volume",{"2":{"89":1,"93":1}}],["v2",{"2":{"79":1}}],["valid",{"2":{"83":1}}],["validate",{"2":{"74":1,"89":1}}],["values",{"2":{"75":1,"84":3}}],["value",{"2":{"74":1,"75":1,"84":2}}],["various",{"2":{"74":1}}],["variable",{"2":{"39":1}}],["v1",{"2":{"56":1}}],["ve",{"2":{"33":1}}],["veryfing",{"2":{"32":1}}],["versions",{"2":{"55":1,"65":1}}],["version",{"2":{"9":2,"33":2}}],["verify",{"0":{"12":1},"2":{"9":1,"12":1,"16":1,"21":1,"22":1,"33":3,"40":1,"60":1,"70":1,"83":1,"86":1,"87":2,"90":1,"91":1,"93":1}}],["verifying",{"0":{"4":1,"10":1,"18":1,"21":1,"40":1,"83":1,"86":1,"87":1,"89":1,"90":1,"91":1,"93":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":2,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"87":1,"88":1,"89":1,"91":1,"92":1,"93":1},"2":{"3":1,"4":1,"5":1,"15":1,"17":3,"18":1,"21":1,"33":1,"77":1}}],["verification",{"0":{"14":1,"16":1,"17":1,"33":1},"1":{"15":1,"16":1,"17":1},"2":{"5":1,"15":1,"17":1,"18":1,"33":1,"48":1,"49":1,"74":6}}],["verified",{"2":{"3":1,"17":13,"22":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["verifier",{"0":{"32":1,"48":1,"61":1,"71":1},"2":{"3":2,"22":2,"26":3,"32":1,"37":5,"38":5,"40":1,"45":1,"48":1,"49":1,"51":2,"52":1,"56":1,"59":1,"61":3,"62":2,"66":1,"69":1,"71":3,"72":2,"74":11,"76":1,"83":4,"87":2,"88":1,"89":2,"91":2,"92":1,"93":1}}],["vm",{"0":{"32":1},"2":{"32":1,"80":1,"81":2,"85":1}}],["v",{"2":{"9":1,"74":1,"89":2,"93":2}}],["no",{"2":{"84":1}}],["now",{"2":{"83":1}}],["note",{"2":{"83":1}}],["not",{"2":{"13":1,"64":1,"76":1,"83":2,"84":1}}],["n",{"2":{"74":7,"75":2,"76":16}}],["numbers",{"2":{"75":1,"84":2}}],["number",{"2":{"74":5,"75":1,"76":3}}],["numpy",{"2":{"55":2,"65":2}}],["nano",{"2":{"39":2}}],["name",{"2":{"30":1,"51":1,"82":3,"83":1,"84":6}}],["navigate",{"0":{"58":1,"68":1},"2":{"8":1,"21":1,"83":1,"87":1,"91":1}}],["next",{"2":{"13":1,"19":1,"20":1,"21":1,"23":1,"26":1,"31":1,"32":1,"33":1}}],["network",{"2":{"13":1}}],["networks",{"2":{"4":1}}],["necessary",{"2":{"3":1,"54":1}}],["needed",{"2":{"47":1}}],["needing",{"2":{"39":1,"49":1}}],["need",{"2":{"3":1,"15":4,"64":1,"78":1,"79":1,"82":1,"83":1}}],["18",{"2":{"74":1,"75":1,"76":2}}],["12",{"2":{"55":2,"65":2}}],["11",{"2":{"42":1}}],["160",{"2":{"33":3}}],["1",{"0":{"8":1,"11":1,"15":1,"43":1,"54":1,"64":1,"74":1},"2":{"17":2,"55":1,"65":1,"74":3,"75":2,"76":7,"79":1,"83":1,"85":1}}],["755",{"2":{"56":1}}],["7",{"0":{"60":1,"70":1},"2":{"6":1,"17":1}}],["minimal",{"0":{"88":1,"92":1}}],["merkle",{"2":{"74":4,"76":5}}],["memory",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"74":6,"76":5,"77":1,"83":5,"84":4}}],["message",{"2":{"9":1}}],["m",{"2":{"65":2}}],["mounted",{"2":{"89":1,"93":1}}],["mode",{"2":{"83":2,"84":6}}],["more",{"2":{"74":1}}],["most",{"2":{"64":1,"74":1}}],["move",{"2":{"37":1,"38":1,"39":1,"79":1,"81":1}}],["mv",{"2":{"37":2,"38":2,"56":1}}],["m3",{"2":{"6":1}}],["machine",{"2":{"89":1,"93":1}}],["macos",{"0":{"37":1,"63":1},"1":{"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"35":1,"52":1}}],["masked160",{"2":{"74":1}}],["master",{"2":{"51":3}}],["may",{"2":{"74":2}}],["maximum",{"2":{"74":1,"75":1}}],["made",{"2":{"32":1,"33":1}}],["madara",{"2":{"3":2}}],["manually",{"2":{"90":1}}],["many",{"2":{"74":1,"76":1}}],["manager",{"2":{"54":1}}],["management",{"0":{"30":1},"2":{"30":1}}],["managing",{"2":{"30":1}}],["manipulate",{"2":{"3":1}}],["makefile",{"2":{"81":1}}],["make",{"2":{"13":1,"19":1,"30":1,"31":1,"33":1,"37":2,"38":2,"81":1}}],["mainnet",{"2":{"15":1,"16":1}}],["main",{"2":{"2":1,"17":2,"33":1,"61":2,"71":2,"76":1,"84":1}}],["gas",{"2":{"82":3}}],["governs",{"2":{"74":1}}],["govern",{"2":{"74":1}}],["gmp",{"2":{"64":1}}],["ghcr",{"2":{"51":3,"88":1,"89":2,"92":1,"93":2}}],["g",{"2":{"39":1,"76":1}}],["globally",{"2":{"37":1,"38":1}}],["given",{"2":{"9":1}}],["githubusercontent",{"2":{"64":1}}],["github",{"2":{"8":1,"15":1,"21":1,"27":2,"37":2,"38":2,"43":1,"45":1,"50":2,"56":1,"57":2,"67":2,"79":1,"80":1,"81":1,"87":1,"89":1,"91":1,"93":1}}],["git",{"2":{"8":2,"15":2,"21":2,"27":3,"54":1,"57":2,"64":1,"67":2,"79":2,"80":1,"81":2,"87":2,"89":2,"91":2,"93":2}}],["gt",{"2":{"9":1,"16":1,"28":2,"79":1,"84":9}}],["guha",{"2":{"8":1}}],["guides",{"2":{"77":1}}],["guide",{"0":{"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"2":{"4":1,"18":1,"20":1,"21":1,"34":1,"41":1,"52":1,"73":1,"86":2,"87":1,"90":1,"91":1}}],["general",{"2":{"84":1}}],["generation",{"2":{"74":3,"75":1}}],["generating",{"2":{"74":2}}],["generatorthis",{"2":{"3":1}}],["generated",{"2":{"3":1,"74":1}}],["generate",{"0":{"11":1},"2":{"3":4,"22":2,"26":1,"83":1,"87":1,"89":1}}],["gen",{"2":{"26":1}}],["get",{"2":{"15":1,"17":1,"54":2}}],["getting",{"0":{"1":1,"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1}}],["during",{"2":{"74":2,"76":1}}],["dpkg",{"2":{"44":1}}],["drop",{"2":{"32":1}}],["difficulty",{"2":{"75":1}}],["different",{"2":{"3":1}}],["distributed",{"2":{"74":1}}],["disables",{"2":{"74":1}}],["directly",{"2":{"27":1,"43":1}}],["directory",{"0":{"58":1,"68":1},"2":{"8":1,"21":2,"39":1,"58":1,"68":1,"81":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["dipdup",{"2":{"21":1,"37":2,"38":2,"43":1,"51":3,"87":1,"88":1,"89":3,"91":1,"92":1,"93":3}}],["default",{"2":{"84":1}}],["define",{"2":{"76":2}}],["defines",{"2":{"74":7,"75":1,"76":2}}],["deafult",{"2":{"84":1}}],["described",{"2":{"76":1}}],["deterrent",{"2":{"75":1}}],["deter",{"2":{"74":1}}],["determines",{"2":{"74":2,"75":1,"76":2}}],["detailed",{"2":{"18":1,"34":1,"73":1}}],["degree",{"2":{"74":6,"75":3,"76":4}}],["decide",{"2":{"76":1}}],["deciding",{"2":{"76":1}}],["decreases",{"2":{"74":1}}],["decommitments",{"2":{"17":2}}],["denoted",{"2":{"74":1}}],["dev",{"2":{"54":2}}],["devices",{"2":{"52":1}}],["deb",{"0":{"43":1},"2":{"41":1,"43":3,"44":1}}],["debian",{"0":{"41":1},"1":{"42":1,"43":1,"44":1},"2":{"41":1,"42":2}}],["dex",{"2":{"33":1}}],["deps",{"2":{"81":1}}],["depth=1",{"2":{"79":1}}],["dependencies",{"0":{"54":1,"64":1},"2":{"19":1,"64":1,"90":1}}],["deployment",{"2":{"45":1}}],["deployed",{"2":{"33":1}}],["deploying",{"0":{"31":1,"33":1},"2":{"31":1}}],["deploy",{"2":{"18":1,"31":1,"33":1}}],["delete",{"2":{"13":1}}],["delve",{"2":{"3":1}}],["deeper",{"2":{"3":1}}],["data",{"2":{"3":1}}],["does",{"2":{"83":1}}],["done",{"2":{"82":1}}],["down",{"2":{"74":1}}],["download",{"0":{"20":1,"36":1,"43":1,"56":1,"88":1,"92":1},"1":{"37":1,"38":1},"2":{"3":1,"21":1,"34":1,"37":3,"38":3,"43":3,"56":1,"87":3,"88":1,"91":2,"92":1}}],["document",{"2":{"77":1}}],["documentation",{"2":{"2":1,"3":1,"86":1,"89":1,"93":1}}],["docker",{"0":{"45":1,"88":1,"89":1,"92":1,"93":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1},"2":{"45":1,"50":1,"51":4,"88":2,"89":6,"90":1,"92":2,"93":6}}],["workload",{"2":{"74":1}}],["work",{"2":{"74":5,"75":2,"76":3}}],["wget",{"2":{"37":2,"38":2,"43":2,"54":1,"56":1}}],["wrapped",{"2":{"84":1}}],["wrote",{"2":{"26":1}}],["written",{"2":{"3":1}}],["walk",{"2":{"90":1}}],["wallet",{"2":{"17":1}}],["way",{"2":{"74":1}}],["wait",{"2":{"33":1}}],["wasm",{"2":{"32":1}}],["want",{"2":{"3":1,"37":1,"38":1,"83":1}}],["website",{"2":{"78":1}}],["well",{"2":{"18":1,"77":1,"83":1}}],["we",{"2":{"15":5,"17":1,"33":1,"83":1}}],["wsl",{"2":{"6":1}}],["whitespace",{"2":{"84":2}}],["which",{"2":{"3":2,"15":1,"62":2,"72":2,"74":5,"84":2}}],["what",{"2":{"83":1}}],["whether",{"2":{"74":3,"76":3}}],["when",{"2":{"26":1,"82":1}}],["where",{"2":{"3":1,"47":1,"75":1,"84":1}}],["wide",{"2":{"37":1,"38":1}}],["will",{"2":{"3":1,"22":1,"33":1,"39":1,"73":1,"74":1,"76":1,"82":1,"84":1,"87":1,"89":1,"90":1,"91":1,"93":1}}],["without",{"2":{"37":1,"38":1,"39":1,"82":1}}],["with",{"0":{"1":1,"8":1,"59":1,"60":1,"69":1,"70":1},"2":{"3":1,"6":1,"29":1,"30":1,"33":3,"55":1,"65":1,"76":1,"82":1,"83":2,"84":1,"89":1,"93":1}}],["url",{"2":{"30":1}}],["url=",{"2":{"16":1}}],["utilized",{"2":{"74":1}}],["utilize",{"2":{"32":1}}],["utilizing",{"0":{"27":1},"1":{"28":1}}],["utility",{"2":{"3":1}}],["utilities",{"2":{"3":1}}],["upgrade",{"2":{"65":1}}],["updates",{"2":{"74":3}}],["update",{"2":{"54":1,"74":1}}],["updated",{"0":{"8":1}}],["updating",{"2":{"40":1}}],["upon",{"2":{"17":1}}],["up",{"0":{"15":1,"29":1,"56":1},"1":{"30":1,"31":1},"2":{"29":1,"30":2,"74":4,"90":1}}],["usr",{"2":{"37":10,"38":10,"39":5,"56":1,"61":3,"71":3}}],["usage",{"0":{"25":1},"2":{"9":1,"19":1,"40":1,"45":1}}],["using",{"0":{"21":1,"26":1,"89":1,"90":1,"91":1,"93":1},"1":{"91":1,"92":1,"93":1},"2":{"8":1,"43":1,"54":1,"59":1,"69":1,"74":1,"76":1,"87":1,"89":1,"90":2,"93":1}}],["users",{"2":{"39":2}}],["user",{"2":{"33":1,"42":1,"74":1,"77":1}}],["used",{"2":{"3":2,"74":5,"75":1,"76":2,"84":4}}],["use",{"2":{"0":1,"2":1,"3":1,"23":1,"28":1,"33":2,"51":1,"74":8,"76":11,"83":1,"86":1}}],["ubuntu",{"0":{"41":1},"1":{"42":1,"43":1,"44":1},"2":{"6":1,"41":1,"42":1}}],["lde",{"2":{"74":8,"76":10}}],["load",{"2":{"76":1}}],["low",{"2":{"74":2,"76":1}}],["log",{"2":{"74":1,"76":5}}],["located",{"2":{"82":1}}],["locating",{"0":{"62":1,"72":1}}],["local",{"2":{"37":7,"38":7,"39":4,"61":3,"71":3,"89":1,"93":1}}],["locally",{"0":{"12":1}}],["ll",{"2":{"64":1}}],["ln",{"2":{"61":2,"71":2,"79":1}}],["leave",{"2":{"39":1}}],["learn",{"2":{"3":1}}],["let",{"2":{"33":1}}],["length",{"2":{"33":1}}],["lsb",{"2":{"33":4,"74":1}}],["lt",{"2":{"9":1,"16":1,"28":2,"79":1,"84":9}}],["limit",{"2":{"84":1}}],["list",{"0":{"84":1},"2":{"74":4,"75":3,"76":3,"84":1}}],["lightweight",{"0":{"47":1,"48":1},"2":{"51":2}}],["line",{"2":{"39":1}}],["links",{"0":{"61":1,"71":1},"2":{"30":1,"61":1,"71":1}}],["linux",{"0":{"38":1,"53":1},"1":{"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"6":1,"35":1,"43":2,"44":1,"52":1,"56":3}}],["likely",{"2":{"64":1}}],["like",{"2":{"17":1,"76":1}}],["libs",{"2":{"79":1}}],["libgmp3",{"2":{"54":1}}],["libdw",{"2":{"54":1}}],["libtinfo5",{"2":{"54":1}}],["libraries",{"2":{"54":1}}],["library",{"2":{"3":2}}],["lib",{"2":{"3":1}}],["lambdaclass",{"2":{"80":1,"81":1}}],["larger",{"2":{"75":1}}],["layers",{"2":{"74":4,"75":2,"76":5}}],["layer",{"2":{"74":4,"75":5,"76":3}}],["layout=small",{"2":{"83":2}}],["layout",{"2":{"11":1,"33":1,"84":4}}],["layouts",{"2":{"3":1}}],["last",{"2":{"74":5,"75":3,"76":3}}],["lang==0",{"2":{"55":1,"65":1}}],["lang",{"2":{"55":1,"65":1}}],["later",{"2":{"27":1,"76":1}}],["latest",{"2":{"3":1,"21":1,"37":2,"38":2,"43":2,"88":1,"92":1}}],["custom",{"2":{"76":1}}],["current",{"2":{"79":1}}],["currently",{"2":{"3":1,"45":1,"84":1}}],["curl",{"2":{"64":1}}],["c",{"2":{"64":1,"89":2,"93":2}}],["cpplint",{"2":{"55":2,"65":2}}],["cpu",{"2":{"11":1,"22":2,"26":4,"37":10,"38":10,"40":2,"51":4,"61":6,"62":4,"71":6,"72":4,"74":2,"76":3,"83":4,"87":2,"88":2,"89":2,"91":2,"92":2,"93":2}}],["cd",{"2":{"8":1,"15":1,"21":1,"33":1,"58":1,"68":1,"81":1,"83":1,"87":1,"89":2,"91":1,"93":2}}],["close",{"2":{"39":1}}],["cloned",{"2":{"30":1,"33":1,"79":1}}],["clone",{"0":{"57":1,"67":1},"2":{"8":2,"15":2,"21":2,"27":2,"57":2,"67":2,"79":2,"81":2,"87":2,"89":2,"91":2,"93":2}}],["cli",{"0":{"8":1,"9":1,"84":1},"2":{"3":1,"8":2,"9":3,"11":1,"12":1,"13":1,"15":1,"84":1}}],["clia",{"2":{"3":1}}],["channel",{"2":{"74":7}}],["change",{"2":{"58":1,"68":1}}],["changes",{"2":{"39":1}}],["chmod",{"2":{"37":2,"38":2,"56":1}}],["chip",{"2":{"6":1}}],["checked",{"2":{"83":2}}],["checks",{"2":{"82":2,"83":1}}],["check",{"0":{"9":1},"2":{"3":1,"31":1,"83":1,"89":1}}],["corelib",{"0":{"79":1},"2":{"79":3}}],["corresponding",{"2":{"74":1}}],["correctness",{"2":{"75":1}}],["correctly",{"2":{"59":1,"69":1}}],["correct",{"2":{"31":1}}],["cosets",{"2":{"74":3,"76":6}}],["cost",{"2":{"74":1,"75":1}}],["covers",{"2":{"73":1}}],["copy",{"2":{"21":1,"87":1}}],["consisting",{"2":{"84":1}}],["consistent",{"2":{"83":1}}],["constraint",{"2":{"74":4,"76":6}}],["configures",{"2":{"74":1,"76":1}}],["configuring",{"2":{"73":1}}],["configurations",{"2":{"33":1,"74":2,"76":2}}],["configuration",{"0":{"73":1,"74":1,"76":1},"1":{"74":1,"75":1,"76":1},"2":{"29":1,"30":1,"39":1,"73":2,"74":13,"76":7}}],["config",{"2":{"22":2,"74":3,"76":5,"83":2,"87":2,"89":2,"91":2,"93":2}}],["configs",{"2":{"11":1}}],["container",{"2":{"89":2,"93":2}}],["contains",{"2":{"47":1,"48":1,"49":1,"76":2,"84":1}}],["context",{"2":{"75":1}}],["contents",{"0":{"5":1}}],["control",{"2":{"74":1}}],["controls",{"2":{"74":2}}],["contract",{"2":{"33":1}}],["contracts",{"0":{"33":1},"2":{"18":1,"33":2}}],["continuous",{"2":{"17":1}}],["communication",{"2":{"74":1}}],["commitments",{"2":{"74":1}}],["commitment",{"2":{"74":7}}],["commands",{"2":{"9":1}}],["command",{"2":{"9":2,"22":1,"44":1,"51":1,"80":1}}],["compiled",{"2":{"82":1}}],["compile",{"2":{"82":1,"83":1}}],["compilation",{"2":{"82":1}}],["computational",{"2":{"74":1,"75":1,"76":1}}],["computations",{"2":{"74":2,"76":1}}],["complexity",{"2":{"74":2}}],["components",{"2":{"45":1}}],["comprehensive",{"2":{"4":1}}],["combined",{"0":{"49":1},"2":{"33":1}}],["comes",{"2":{"26":3}}],["com",{"2":{"8":1,"15":1,"21":1,"27":2,"37":2,"38":2,"43":1,"56":1,"57":1,"64":1,"67":1,"79":1,"80":1,"81":1,"87":1,"89":1,"91":1,"93":1}}],["cryptographic",{"2":{"74":1}}],["critical",{"2":{"74":1}}],["crucial",{"2":{"74":2}}],["created",{"2":{"89":1,"93":1}}],["create",{"0":{"61":1,"71":1},"2":{"21":1,"30":1,"61":1,"71":1,"73":1,"76":1,"86":1,"87":1,"93":1}}],["creating",{"0":{"10":1,"21":1,"83":1,"86":1,"87":1,"89":1,"91":1,"93":1},"1":{"11":1,"87":1,"88":1,"89":1},"2":{"4":1,"5":1,"18":1,"21":1,"76":1,"77":1}}],["crate",{"2":{"3":1}}],["capacity",{"2":{"84":1}}],["capabilities",{"2":{"48":1}}],["capable",{"2":{"3":1}}],["caching",{"2":{"76":1}}],["cached",{"2":{"74":4,"76":3}}],["cases",{"2":{"74":1}}],["cargo",{"2":{"8":2,"16":1,"24":1,"27":1,"80":1,"82":1}}],["calldata",{"2":{"3":2,"28":2,"33":3}}],["can",{"2":{"3":4,"15":1,"17":1,"23":1,"27":1,"32":1,"33":1,"39":3,"40":1,"50":1,"74":3,"79":1,"81":1,"82":1,"83":1,"84":4,"93":1}}],["cairo1",{"0":{"80":1,"81":1,"82":1},"1":{"81":1},"2":{"33":2,"80":2,"81":2,"82":1,"83":2,"84":1,"85":1}}],["cairo0",{"2":{"11":1,"33":2}}],["cairo",{"0":{"8":1,"32":1,"77":1,"83":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"3":5,"9":1,"11":1,"32":1,"33":1,"55":2,"65":2,"77":1,"79":4,"80":1,"81":2,"82":1,"83":5,"84":6,"85":2,"86":1}}],["felt252",{"2":{"84":2}}],["fewer",{"2":{"75":1}}],["feature",{"2":{"74":1}}],["fft",{"2":{"74":5,"76":5}}],["full",{"2":{"74":5,"76":6}}],["fundamental",{"2":{"74":1}}],["functions",{"2":{"74":1}}],["functionalities",{"2":{"49":1}}],["functionality",{"2":{"47":1}}],["function",{"2":{"3":1,"33":1,"74":4,"76":1,"84":1}}],["false",{"2":{"74":4,"76":9,"82":1}}],["fast",{"2":{"74":2,"75":1,"76":1}}],["factor",{"2":{"74":2,"75":2}}],["fact",{"2":{"11":2,"13":1,"16":2}}],["fssl",{"2":{"64":1}}],["first",{"2":{"74":1,"75":1,"79":2,"89":1}}],["finally",{"2":{"83":1}}],["final",{"2":{"75":1}}],["fine",{"2":{"74":1}}],["find",{"2":{"50":1}}],["fields",{"2":{"74":2,"76":1}}],["field",{"2":{"74":11,"76":11}}],["fibonacci",{"2":{"22":1,"26":8,"28":4,"33":2,"83":3,"87":1,"89":1,"91":1,"93":1}}],["filename",{"2":{"84":1}}],["file=",{"2":{"83":2}}],["file=cpu",{"2":{"22":2,"87":2,"89":2,"91":2,"93":2}}],["file=fibonacci",{"2":{"22":4,"83":8,"87":4,"89":4,"91":4,"93":4}}],["files",{"2":{"13":1,"21":2,"26":3,"33":1,"74":2,"76":1,"83":1,"87":2,"89":3,"91":2,"93":3}}],["file",{"0":{"27":1,"76":1},"1":{"28":1},"2":{"11":1,"12":2,"13":2,"26":12,"32":1,"39":2,"73":2,"76":6,"82":1,"83":7,"84":13}}],["friendly",{"2":{"74":6}}],["fri",{"0":{"75":1},"2":{"17":9,"73":1,"74":7,"75":6,"76":9}}],["from",{"0":{"52":1,"81":1},"1":{"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"3":1,"15":1,"21":1,"26":3,"39":2,"41":1,"43":1,"52":1,"57":1,"67":1,"76":1,"79":1,"81":1,"84":1}}],["flag",{"2":{"3":1,"84":1}}],["focus",{"2":{"76":1}}],["focusing",{"2":{"73":1,"76":1}}],["fof",{"0":{"75":1}}],["footprint",{"2":{"74":1}}],["found",{"2":{"74":1}}],["foundry",{"0":{"29":1},"1":{"30":1,"31":1},"2":{"15":2,"19":1,"29":1,"30":1}}],["fourier",{"2":{"74":1,"76":1}}],["folder",{"2":{"39":2}}],["followed",{"2":{"51":1}}],["follows",{"2":{"28":1,"29":1}}],["following",{"2":{"19":1,"20":1,"22":1,"23":1,"30":1,"33":2,"35":1,"39":1,"44":1,"64":1,"80":1,"82":1,"84":1}}],["follow",{"2":{"3":1,"18":1,"19":1,"21":1,"34":1,"76":1,"78":1,"79":1,"81":1,"87":1}}],["force",{"2":{"74":1,"75":1}}],["fork",{"2":{"16":1}}],["format",{"0":{"76":1},"2":{"3":1,"26":3,"73":1,"76":1,"84":1}}],["formats",{"2":{"3":1}}],["for",{"0":{"13":1,"33":1,"37":1,"38":1,"61":1,"71":1,"88":1,"92":1},"2":{"3":3,"4":1,"9":2,"13":1,"15":3,"27":1,"28":2,"30":1,"32":1,"33":3,"35":1,"37":1,"38":1,"39":4,"47":1,"48":1,"49":1,"51":4,"52":1,"73":2,"74":19,"75":4,"76":13,"83":1,"84":3,"86":1,"89":1,"90":1,"93":1}}],["rate",{"2":{"74":1,"75":1}}],["raw",{"2":{"64":1}}],["rahul",{"2":{"8":1}}],["rpc",{"2":{"15":1,"16":1,"30":1}}],["ryzen",{"2":{"6":1}}],["runs",{"2":{"84":1}}],["run",{"0":{"16":1,"60":1,"70":1,"80":1,"81":1,"82":1},"1":{"81":1},"2":{"16":1,"22":2,"44":1,"60":1,"70":1,"78":1,"80":3,"81":3,"82":3,"83":5,"84":2,"85":1,"87":2,"89":5,"91":2,"93":4}}],["running",{"0":{"82":1,"86":1},"1":{"87":1,"88":1,"89":1},"2":{"6":2,"9":1,"15":1,"17":1,"40":1,"77":1,"82":1}}],["rust",{"0":{"78":1},"2":{"3":1,"19":1,"32":1,"78":1}}],["return",{"2":{"84":4}}],["reduction",{"2":{"75":1}}],["reducing",{"2":{"75":1}}],["reduce",{"2":{"74":2,"76":1}}],["reduces",{"2":{"74":1,"75":1}}],["replace",{"2":{"83":1}}],["repo",{"2":{"81":1}}],["repository",{"0":{"57":1,"67":1},"2":{"3":1,"8":1,"15":1,"21":1,"27":1,"30":1,"33":1,"50":1,"57":1,"67":1,"79":3,"87":1,"89":2,"91":1,"93":2}}],["represents",{"2":{"74":1,"75":1}}],["reed",{"2":{"74":1,"75":1}}],["requirements",{"2":{"76":1}}],["required",{"2":{"55":1,"65":1,"90":1}}],["requiring",{"2":{"48":1}}],["re",{"2":{"33":1,"40":1,"76":1}}],["refer",{"2":{"30":1,"87":1,"91":1,"93":1}}],["referenced",{"2":{"19":1}}],["receives",{"2":{"84":8}}],["receiving",{"2":{"26":1}}],["recommended",{"2":{"37":1,"38":1,"42":1}}],["recursive",{"2":{"3":1,"33":3}}],["register",{"2":{"17":1}}],["read",{"2":{"3":1,"84":1}}],["relocated",{"2":{"84":2}}],["reload",{"2":{"39":1}}],["relies",{"2":{"74":1}}],["reliable",{"2":{"3":1}}],["related",{"2":{"65":1,"74":2,"75":1,"76":1}}],["releases",{"2":{"37":2,"38":2,"43":2,"56":1}}],["release",{"2":{"3":1,"21":1}}],["resource",{"2":{"3":1}}],["resourcedescriptionmadara",{"2":{"3":1}}],["resources",{"0":{"3":1,"85":1}}],["b",{"2":{"79":1}}],["brackets",{"2":{"84":1}}],["brute",{"2":{"74":1,"75":1}}],["breakdpwn",{"2":{"74":1}}],["break",{"2":{"65":2}}],["brew",{"2":{"64":3,"66":1}}],["balance",{"2":{"73":1,"74":1}}],["bad",{"2":{"57":1,"67":1}}],["baking",{"2":{"57":1,"67":1}}],["bazelbin",{"2":{"61":2,"71":2}}],["bazelbuild",{"2":{"56":1}}],["bazelisk",{"0":{"56":1,"59":1,"60":1,"66":1,"69":1,"70":1},"2":{"56":6,"59":2,"60":1,"66":2,"69":2,"70":1}}],["basic",{"2":{"76":1}}],["bash",{"2":{"39":2,"64":1,"89":2,"93":2}}],["bashrc",{"2":{"39":3}}],["based",{"2":{"34":1,"42":1,"74":1,"76":2,"86":1}}],["builtin",{"2":{"84":1}}],["builtins",{"2":{"83":1,"84":3}}],["built",{"0":{"62":1,"72":1},"2":{"61":1,"71":1}}],["building",{"2":{"52":1}}],["build",{"0":{"52":1,"59":1,"69":1},"1":{"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"56":1,"59":2,"60":1,"61":2,"66":1,"69":2,"70":1,"71":2,"82":1}}],["but",{"2":{"37":1,"38":1,"74":3,"75":1}}],["blake2s",{"2":{"33":3}}],["blockstone",{"2":{"3":1}}],["bounding",{"2":{"75":1}}],["bound",{"2":{"74":3,"75":2,"76":3}}],["both",{"2":{"49":2,"74":1,"88":1,"90":1,"92":1}}],["box",{"2":{"32":1}}],["book",{"2":{"85":1}}],["bookthis",{"2":{"3":1}}],["bootloader",{"2":{"3":1,"9":1,"11":3,"12":1,"13":3,"16":1}}],["bigger",{"2":{"75":1}}],["bin",{"2":{"37":10,"38":10,"39":5,"56":1,"61":3,"64":1,"71":3,"83":4,"89":2,"93":2}}],["binary",{"0":{"90":1},"1":{"91":1,"92":1,"93":1},"2":{"21":1,"47":1,"48":1,"56":1,"66":1,"87":1,"91":1}}],["binaries",{"0":{"20":1,"21":1,"36":1,"39":1,"62":1,"72":1,"91":1},"1":{"37":1,"38":1,"40":1},"2":{"3":1,"34":1,"35":1,"37":4,"38":4,"39":3,"40":1,"49":1,"61":1,"71":1,"87":1,"90":1,"91":1}}],["bits",{"2":{"74":3,"75":2,"76":3}}],["bit",{"2":{"33":1}}],["bitwise",{"2":{"11":1}}],["by",{"2":{"3":1,"20":1,"23":1,"32":1,"40":1,"51":1,"52":1,"74":3,"75":3,"76":1,"86":1}}],["behaviour",{"2":{"84":1}}],["being",{"2":{"83":1}}],["between",{"2":{"73":1,"74":1,"84":1}}],["below",{"2":{"18":1}}],["been",{"0":{"9":1}}],["beetwen",{"2":{"3":1}}],["begin",{"2":{"6":1,"19":1}}],["before",{"2":{"6":1,"19":1,"31":1}}],["be",{"2":{"3":3,"22":1,"39":2,"74":2,"76":2,"83":3,"84":7,"87":1,"89":1,"91":1,"93":1}}],["e2e",{"2":{"83":2}}],["efficiency",{"2":{"75":1}}],["error",{"2":{"75":1}}],["essential",{"2":{"75":1}}],["evaluating",{"2":{"74":1}}],["evaluation",{"2":{"74":1,"76":3}}],["evaluations",{"2":{"74":4,"76":1}}],["eval",{"2":{"74":2,"76":4}}],["evm",{"0":{"15":1,"23":1,"26":1},"1":{"24":1,"25":1,"26":1},"2":{"3":2,"15":3,"23":1,"24":1,"25":1,"26":4}}],["elements",{"2":{"74":1,"76":1}}],["easily",{"2":{"61":1,"71":1}}],["each",{"2":{"3":1,"51":1,"74":3,"75":2}}],["environment",{"2":{"90":1}}],["environments",{"2":{"47":1,"49":1}}],["enabled",{"2":{"84":3}}],["enable",{"2":{"82":1}}],["entrypoint",{"2":{"89":2,"93":2}}],["entry",{"2":{"75":1}}],["enhance",{"2":{"74":1}}],["ensuring",{"2":{"74":2,"75":1}}],["ensures",{"2":{"39":1}}],["ensure",{"2":{"6":1,"18":1,"19":1,"39":1,"59":1,"69":1,"75":1,"82":1,"89":1,"93":1}}],["encompasses",{"2":{"74":1}}],["e",{"2":{"39":1,"76":1}}],["echo",{"2":{"22":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["ethereum",{"0":{"4":1,"13":1,"14":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2},"2":{"3":1,"4":1,"5":1,"9":1,"13":1,"15":2,"16":1}}],["either",{"2":{"3":1}}],["exec",{"2":{"89":2,"93":2}}],["executable",{"2":{"37":1,"38":1}}],["executed",{"2":{"39":1}}],["execute",{"2":{"31":1}}],["execution",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"3":1,"77":1}}],["executing",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"3":1}}],["exceeds",{"2":{"84":1}}],["externally",{"2":{"83":1}}],["extension",{"2":{"74":6,"76":8}}],["extra",{"2":{"12":2,"13":2,"26":6,"84":1}}],["expects",{"2":{"84":1}}],["expected",{"2":{"3":1}}],["explain",{"2":{"73":1}}],["export",{"2":{"39":1}}],["examples",{"2":{"11":1,"33":1,"51":1,"76":1}}],["example",{"0":{"0":1,"26":1},"2":{"0":1,"2":1,"16":1,"21":1,"22":1,"31":1,"33":1,"74":8,"75":4,"76":11,"83":4,"87":2,"89":1,"91":2,"93":1}}],["iv",{"2":{"74":1,"76":1}}],["impacts",{"2":{"74":1}}],["important",{"2":{"74":1}}],["image",{"0":{"47":1,"48":1,"49":1},"2":{"51":3,"88":1,"92":1}}],["images",{"0":{"45":1,"46":1,"50":1,"51":1,"88":1,"92":1},"1":{"46":1,"47":2,"48":2,"49":2,"50":1,"51":1},"2":{"45":2,"50":1}}],["iii",{"2":{"74":1,"76":1}}],["ii",{"2":{"74":1,"76":1}}],["ideal",{"2":{"47":1}}],["i",{"2":{"44":1,"74":1,"76":1}}],["io",{"2":{"21":1,"37":2,"38":2,"43":1,"51":6,"87":1,"88":2,"89":5,"91":1,"92":2,"93":5}}],["if",{"2":{"3":1,"31":1,"37":1,"38":1,"39":1,"40":1,"64":1,"74":2,"76":2,"79":1,"81":1,"84":4}}],["itself",{"2":{"83":1}}],["its",{"2":{"45":1}}],["it",{"2":{"3":1,"15":1,"32":1,"43":1,"73":1,"74":2,"81":1,"84":5,"90":1}}],["indicates",{"2":{"76":1}}],["indicate",{"2":{"75":1}}],["influencing",{"2":{"74":1}}],["information",{"2":{"40":1}}],["involved",{"2":{"74":1,"76":1}}],["increase",{"2":{"75":1}}],["increases",{"2":{"74":2}}],["increasing",{"2":{"74":1}}],["including",{"2":{"55":1,"65":1}}],["included",{"2":{"83":2}}],["includes",{"2":{"76":1,"88":1,"90":1,"92":1}}],["include",{"2":{"39":1,"74":1,"83":1}}],["interactive",{"2":{"74":1,"75":1}}],["interaction",{"2":{"74":1}}],["interact",{"2":{"29":1}}],["integrity",{"0":{"27":1,"33":1},"1":{"28":1},"2":{"3":2,"18":1,"19":1,"22":1,"27":3,"30":1,"33":3}}],["into",{"2":{"3":1,"33":1,"84":5}}],["in",{"0":{"33":1,"82":1},"2":{"3":1,"6":1,"21":1,"22":1,"26":1,"32":3,"33":3,"39":4,"50":1,"61":1,"71":1,"74":14,"75":8,"76":6,"78":1,"79":2,"83":3,"84":2,"87":1,"89":1,"91":1,"93":1}}],["input=fibonacci",{"2":{"83":4}}],["inputs",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"77":1,"84":2}}],["input",{"2":{"3":1,"22":4,"83":11,"84":7,"87":4,"89":4,"91":4,"93":4}}],["instance",{"2":{"74":1}}],["installating",{"0":{"44":1}}],["installation",{"0":{"7":1,"24":1,"34":1,"40":1},"1":{"8":1,"9":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"2":{"5":1,"20":1,"40":2,"87":1,"89":1,"91":1,"93":1}}],["installing",{"0":{"41":1,"78":1,"79":1,"80":1,"81":1},"1":{"42":1,"43":1,"44":1,"81":1},"2":{"77":1,"90":1}}],["installed",{"0":{"9":1},"2":{"19":1,"64":1,"79":1,"89":1,"93":1}}],["install",{"0":{"8":1,"36":1,"54":1,"55":1,"64":1,"65":1,"66":1},"1":{"37":1,"38":1},"2":{"8":2,"15":2,"24":1,"27":2,"34":1,"41":1,"42":1,"44":2,"54":2,"55":2,"56":1,"64":6,"65":3,"66":2,"78":1,"80":2,"81":1}}],["instructions",{"2":{"3":1,"18":1,"19":1,"23":1,"34":1,"41":1,"52":1,"73":1,"78":1,"84":1,"86":1,"89":1,"93":1}}],["inside",{"2":{"3":1,"30":1,"81":1}}],["issues",{"2":{"65":1}}],["is",{"2":{"2":1,"3":8,"6":1,"17":1,"31":1,"33":1,"37":1,"38":1,"40":1,"47":1,"59":1,"64":1,"65":1,"69":1,"74":8,"75":2,"82":1,"83":5,"84":4,"86":1,"89":1,"93":1}}],["omit",{"2":{"79":1}}],["obtain",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"77":1}}],["observed",{"2":{"76":1}}],["object",{"2":{"74":1}}],["overhead",{"2":{"75":1}}],["overview",{"0":{"74":1}}],["otherwise",{"2":{"79":1}}],["other",{"2":{"39":1}}],["o",{"2":{"37":2,"38":2,"43":1}}],["os",{"2":{"34":1,"54":1}}],["optimized",{"2":{"74":1}}],["optimize",{"2":{"74":1}}],["optimization",{"2":{"74":1}}],["optimal",{"2":{"73":1}}],["option",{"2":{"74":2}}],["optional",{"2":{"37":2,"38":2,"84":1}}],["options",{"2":{"9":1}}],["operations",{"2":{"74":2}}],["operating",{"2":{"34":1}}],["operates",{"2":{"74":2}}],["open",{"2":{"39":1}}],["order",{"2":{"78":1,"84":1}}],["oracle",{"2":{"74":1,"75":1}}],["org",{"2":{"65":1}}],["original",{"2":{"28":1}}],["or",{"2":{"9":1,"21":1,"39":2,"40":1,"41":1,"42":1,"43":1,"76":1,"83":1,"84":1,"87":1}}],["out",{"2":{"22":1,"26":1,"74":4,"76":5,"83":1,"87":1,"89":1,"91":1,"93":1}}],["outlined",{"2":{"19":1,"21":1,"76":1}}],["outputs",{"2":{"84":5}}],["output",{"0":{"17":1},"2":{"3":1,"9":1,"11":3,"12":2,"13":3,"26":4,"84":3}}],["our",{"2":{"3":1,"33":1}}],["one",{"2":{"33":1,"74":1}}],["onchain",{"2":{"33":1}}],["only",{"2":{"3":1,"47":2,"48":2,"83":1,"84":5}}],["on",{"0":{"4":1,"18":1,"41":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"42":1,"43":1,"44":1},"2":{"3":3,"4":1,"6":3,"15":1,"18":2,"33":3,"34":2,"41":1,"45":1,"52":1,"73":2,"74":2,"76":6,"78":1,"86":2,"89":1,"93":1}}],["official",{"2":{"78":1,"86":1,"89":1,"93":1}}],["often",{"2":{"74":1}}],["of",{"0":{"5":1,"74":1,"83":1},"2":{"0":1,"2":2,"3":8,"9":1,"45":1,"55":1,"65":1,"73":2,"74":32,"75":12,"76":15,"81":1,"83":2,"84":9}}],["above",{"2":{"76":2}}],["about",{"2":{"3":1,"6":2}}],["against",{"2":{"75":1}}],["aim",{"2":{"74":1}}],["air",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"11":1,"22":4,"26":4,"37":10,"38":10,"40":2,"51":4,"61":4,"62":4,"71":4,"72":4,"74":2,"76":3,"77":1,"83":8,"84":6,"87":4,"88":2,"89":4,"91":4,"92":2,"93":4}}],["affect",{"2":{"74":1}}],["after",{"2":{"40":1}}],["array",{"2":{"84":2}}],["arrays",{"2":{"84":2}}],["argument",{"0":{"84":1},"2":{"84":1}}],["arguments",{"2":{"83":1,"84":5}}],["args",{"2":{"83":4,"84":3}}],["arithmetic",{"2":{"74":1}}],["arm64",{"0":{"37":1},"2":{"35":1,"37":2}}],["architectures",{"0":{"35":1},"2":{"35":1}}],["architecture",{"2":{"34":1,"59":1,"69":1}}],["areas",{"2":{"74":1}}],["are",{"2":{"3":1,"6":1,"19":1,"33":1,"35":1,"45":1,"51":1,"74":6,"75":1,"76":2,"83":1,"84":1}}],["acting",{"2":{"75":1}}],["actually",{"2":{"38":1}}],["accelerate",{"2":{"74":1}}],["accessing",{"0":{"50":1}}],["accessed",{"2":{"39":1}}],["access",{"2":{"37":1,"38":1,"42":1,"61":1,"71":1}}],["accuracy",{"2":{"74":1}}],["account",{"0":{"31":1},"2":{"29":1,"30":5,"31":2}}],["acount",{"0":{"30":1}}],["amp",{"2":{"22":2,"83":2,"84":1,"87":2,"89":6,"91":2,"93":6}}],["amd64",{"2":{"6":1,"56":3}}],["attacks",{"2":{"74":1,"75":1}}],["at",{"2":{"22":1,"74":4,"75":2,"82":1,"87":1,"89":1,"91":1,"93":1}}],["avoid",{"2":{"65":1}}],["available",{"0":{"46":1},"1":{"47":1,"48":1,"49":1},"2":{"22":1,"35":1,"37":1,"38":1,"45":1,"83":1,"84":2,"87":1,"91":1}}],["avx",{"2":{"6":1}}],["adhering",{"2":{"76":1}}],["added",{"2":{"76":1}}],["additional",{"0":{"85":1},"2":{"76":1}}],["adding",{"0":{"39":1},"1":{"40":1},"2":{"37":1,"38":1,"82":1}}],["adds",{"2":{"74":1,"84":1}}],["add",{"2":{"30":1,"39":2,"82":1,"83":1}}],["address",{"2":{"17":1}}],["adapter",{"0":{"15":1,"23":1,"26":1},"1":{"24":1,"25":1,"26":1},"2":{"3":1,"15":3,"23":1,"24":1,"25":1,"26":4}}],["adapterstark",{"2":{"3":1}}],["all",{"2":{"76":1,"79":1,"84":3}}],["allows",{"2":{"84":2}}],["allow",{"2":{"74":1}}],["already",{"2":{"64":1,"79":1}}],["along",{"2":{"34":1,"55":1,"65":1}}],["alternatively",{"2":{"23":1,"27":1}}],["alchemy",{"2":{"15":1}}],["also",{"2":{"6":1,"15":2,"73":1,"74":1,"84":2}}],["apt",{"2":{"54":2}}],["app",{"2":{"89":4,"93":4}}],["append",{"2":{"84":2}}],["appears",{"2":{"83":1}}],["apply",{"2":{"39":1}}],["apple",{"2":{"6":1}}],["appropriate",{"2":{"30":1}}],["apithis",{"2":{"3":1}}],["assigned",{"2":{"74":1,"76":2}}],["aspects",{"2":{"74":2}}],["as",{"2":{"3":1,"18":2,"19":1,"28":1,"29":1,"74":3,"75":1,"76":2,"77":2,"82":1,"83":3,"84":2}}],["a",{"0":{"21":1,"82":1,"83":2,"86":1,"87":1,"89":1,"91":1,"93":1},"1":{"87":1,"88":1,"89":1},"2":{"3":9,"4":1,"15":1,"18":1,"21":2,"41":1,"42":1,"73":1,"74":8,"75":3,"76":7,"84":5,"87":2,"89":1,"90":1,"93":1}}],["another",{"2":{"74":1,"83":1}}],["anvil",{"2":{"17":1}}],["annotated",{"2":{"16":1,"22":1,"26":5,"28":2}}],["annotation",{"2":{"12":2,"13":2,"26":10}}],["annotations",{"2":{"3":1,"22":1}}],["and",{"0":{"10":1,"21":1,"36":1,"56":1,"61":1,"71":1,"77":1,"83":1,"86":1,"87":1,"89":1,"91":1,"93":1},"1":{"11":1,"37":1,"38":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"87":1,"88":1,"89":1},"2":{"3":9,"4":1,"5":1,"9":2,"13":1,"18":1,"19":1,"21":2,"29":1,"30":1,"32":1,"33":2,"34":2,"37":1,"38":1,"39":1,"45":2,"49":2,"52":2,"55":2,"59":1,"61":1,"65":2,"69":1,"71":1,"73":2,"74":10,"75":1,"76":4,"77":3,"83":1,"84":8,"86":1,"87":1,"88":1,"90":1,"92":1}}],["anywhere",{"2":{"39":1}}],["any",{"2":{"3":1,"39":2}}],["an",{"2":{"0":1,"2":1,"26":1,"51":1,"73":1,"74":1,"75":1,"76":2,"83":1}}],["please",{"2":{"87":1,"91":1}}],["plain",{"2":{"84":1}}],["place",{"2":{"74":1}}],["placed",{"2":{"39":1}}],["placing",{"2":{"40":1}}],["pie",{"2":{"84":3}}],["pip",{"2":{"54":1,"55":1,"65":3}}],["phase",{"2":{"74":1}}],["pow",{"2":{"74":2}}],["potentially",{"2":{"74":1}}],["polynomials",{"2":{"74":1}}],["polynomial",{"2":{"74":7,"75":1,"76":7}}],["poseidon3",{"2":{"74":2}}],["poseidon",{"2":{"33":1}}],["per",{"2":{"74":2,"76":6}}],["performed",{"2":{"74":2,"75":1}}],["performance",{"2":{"73":1,"74":2}}],["perfect",{"2":{"48":1}}],["peps",{"2":{"65":1}}],["pep",{"2":{"65":2}}],["pytest",{"2":{"55":2,"65":2}}],["python",{"0":{"55":1,"65":1},"2":{"55":1,"64":1,"65":2}}],["python3",{"2":{"54":2,"65":2}}],["purpose",{"2":{"84":1}}],["purposes",{"2":{"74":1}}],["pull",{"2":{"51":5,"88":1,"92":1}}],["pulling",{"0":{"51":1}}],["public",{"2":{"22":2,"83":8,"84":3,"87":2,"89":2,"91":2,"93":2}}],["prefer",{"2":{"39":1,"81":1}}],["prefunded",{"2":{"31":1}}],["prerequisites",{"0":{"6":1,"19":1,"42":1},"1":{"20":1,"21":1,"22":1},"2":{"5":1,"19":1}}],["primefield0",{"2":{"74":2,"76":3}}],["prime",{"2":{"74":2,"76":1}}],["privilege",{"2":{"42":1}}],["private",{"2":{"22":2,"83":6,"84":3,"87":2,"89":2,"91":2,"93":2}}],["print",{"2":{"9":3}}],["program",{"0":{"77":1,"83":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"78":1,"83":2,"84":3}}],["programs",{"2":{"3":3,"9":1,"11":1,"77":1,"86":1}}],["probability",{"2":{"75":1}}],["proximity",{"2":{"74":3,"75":3}}],["proxy",{"2":{"33":1}}],["protocol",{"0":{"75":1},"2":{"73":1,"74":5,"75":1,"76":1}}],["procedures",{"2":{"27":1}}],["proceed",{"2":{"26":1}}],["processed",{"2":{"74":1,"76":1}}],["processes",{"2":{"74":1}}],["process",{"2":{"18":1,"74":4}}],["proof=",{"2":{"16":1}}],["proofs",{"0":{"4":1,"10":1,"18":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":2,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"2":{"3":2,"4":1,"5":1,"9":1,"18":1,"74":5,"75":2,"86":1}}],["proof",{"0":{"8":1,"11":1,"12":1,"13":1,"21":1,"22":1,"27":1,"28":1,"83":1,"86":1,"87":1,"89":1,"90":1,"91":1,"93":1},"1":{"28":1,"87":1,"88":1,"89":1,"91":1,"92":1,"93":1},"2":{"3":7,"9":1,"11":1,"12":2,"13":5,"16":2,"17":3,"21":2,"22":7,"26":13,"27":2,"28":8,"32":2,"74":13,"75":8,"76":3,"83":10,"84":6,"87":8,"89":7,"90":1,"91":6,"93":7}}],["provided",{"2":{"90":1}}],["provides",{"2":{"3":2,"18":1,"34":1,"41":1,"45":1,"52":1,"86":1}}],["proving",{"2":{"3":1,"9":1,"47":1,"49":1,"74":5,"76":1}}],["proved",{"2":{"83":1}}],["prove",{"2":{"3":1,"9":2,"11":1}}],["prover",{"0":{"47":1,"57":1,"61":1,"67":1,"71":1,"73":1,"74":1,"86":1},"1":{"74":1,"75":1,"76":1,"87":1,"88":1,"89":1},"2":{"3":5,"6":2,"22":3,"26":1,"37":5,"38":5,"40":1,"43":2,"44":1,"45":1,"47":1,"49":1,"51":4,"52":1,"56":1,"57":3,"58":2,"59":1,"61":5,"62":2,"66":1,"67":3,"68":2,"69":1,"71":5,"72":2,"73":1,"74":15,"76":9,"83":5,"85":1,"86":2,"87":5,"88":3,"89":9,"91":4,"92":3,"93":9}}],["project",{"0":{"58":1,"59":1,"68":1,"69":1,"82":1},"2":{"3":1,"58":1,"68":1,"82":6}}],["passed",{"2":{"59":1,"69":1,"84":1}}],["pasting",{"2":{"32":1}}],["packages",{"0":{"55":1,"65":1},"2":{"42":1,"45":1,"50":2,"55":1,"65":3}}],["package",{"0":{"43":1,"44":1},"2":{"41":1,"43":1,"44":1,"54":1,"88":1,"92":1}}],["packaging",{"0":{"0":1,"1":1,"2":1,"3":1,"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"2":{"0":1,"2":2,"21":3,"33":1,"37":2,"38":2,"43":2,"51":3,"87":3,"88":1,"89":6,"91":3,"92":1,"93":6}}],["path=",{"2":{"39":1}}],["path",{"0":{"39":1},"1":{"40":1},"2":{"8":1,"37":1,"38":1,"39":2,"40":1,"79":2,"82":1}}],["parallelism",{"2":{"74":1}}],["params",{"2":{"11":1,"22":1,"74":1,"76":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["parameters",{"2":{"73":1,"74":2,"76":2}}],["parameter",{"2":{"11":1,"22":1,"74":3,"75":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["parser",{"2":{"3":1}}],["parserthis",{"2":{"3":1}}],["parse",{"0":{"8":1},"2":{"3":2}}],["particular",{"2":{"76":1}}],["part",{"2":{"3":1,"75":1}}],["page",{"2":{"2":1,"17":1,"43":1}}],["typically",{"2":{"76":1}}],["type",{"2":{"74":2,"76":1}}],["tuned",{"2":{"74":1}}],["tx",{"2":{"33":1}}],["txt",{"2":{"26":6,"83":2}}],["true",{"2":{"22":1,"74":3,"76":1}}],["traces",{"2":{"77":1}}],["trace",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"17":4,"83":4,"84":4}}],["transform",{"2":{"74":1,"76":1}}],["translate",{"2":{"3":1}}],["transactions",{"2":{"3":1}}],["tmp",{"2":{"21":2,"43":1,"44":1,"57":1,"58":1,"61":2,"67":1,"68":1,"71":2,"87":2,"89":3,"91":2,"93":3}}],["testing",{"2":{"33":1}}],["test",{"0":{"21":1,"89":1,"91":1,"93":1},"2":{"17":1,"21":4,"26":3,"33":1,"60":1,"70":1,"83":3,"87":2,"89":3,"91":2,"93":3}}],["tests",{"0":{"60":1,"70":1},"2":{"11":1,"60":1,"70":1,"77":1}}],["target",{"2":{"82":2}}],["tasks",{"2":{"74":5,"76":6}}],["task",{"2":{"74":3,"76":6}}],["take",{"2":{"74":1}}],["takes",{"2":{"6":2}}],["table",{"0":{"5":1},"2":{"74":3,"76":5}}],["things",{"2":{"83":1}}],["thing",{"2":{"83":1}}],["this",{"2":{"2":1,"3":3,"9":2,"17":1,"18":1,"21":1,"33":2,"34":1,"37":1,"38":1,"39":2,"41":1,"52":1,"73":1,"74":12,"75":6,"77":1,"79":1,"84":2,"86":2,"90":1}}],["through",{"2":{"77":1,"90":1}}],["three",{"2":{"45":1,"74":1,"75":1}}],["that",{"2":{"3":2,"39":3,"74":6,"75":1,"76":1,"82":1,"83":4}}],["they",{"2":{"74":1}}],["there",{"2":{"45":1}}],["then",{"2":{"39":1,"40":1,"82":2}}],["them",{"2":{"3":1,"39":1}}],["these",{"2":{"3":1,"19":1,"74":2,"76":1,"79":1,"81":1,"83":1,"87":1}}],["the",{"0":{"8":1,"11":1,"12":1,"13":1,"22":1,"27":2,"28":1,"33":1,"39":1,"43":1,"44":1,"50":1,"51":1,"57":1,"58":1,"59":1,"62":1,"67":1,"68":1,"69":1,"72":1,"74":1,"75":1,"90":1},"1":{"28":2,"40":1,"91":1,"92":1,"93":1},"2":{"2":1,"3":19,"6":2,"8":2,"9":3,"13":2,"15":2,"18":1,"19":2,"20":1,"21":6,"22":5,"23":2,"26":1,"27":2,"28":4,"30":1,"31":2,"32":4,"33":9,"34":1,"35":1,"37":4,"38":4,"39":5,"40":4,"43":2,"44":2,"45":1,"47":1,"48":1,"49":1,"50":2,"51":5,"52":1,"54":1,"55":1,"56":2,"57":1,"58":1,"59":2,"60":2,"61":1,"64":2,"65":1,"66":2,"67":1,"68":1,"69":2,"70":2,"71":1,"73":5,"74":63,"75":19,"76":17,"77":1,"78":3,"79":4,"80":1,"81":2,"82":2,"83":17,"84":30,"85":4,"86":2,"87":8,"88":2,"89":8,"90":3,"91":8,"92":2,"93":7}}],["toml",{"2":{"30":1,"82":1}}],["tool",{"2":{"27":1,"28":1,"32":1}}],["tools",{"2":{"19":1}}],["topologies=",{"2":{"16":1}}],["topologies",{"2":{"11":2,"13":1,"16":1}}],["top",{"2":{"3":1}}],["to",{"0":{"27":1,"39":1,"58":1,"68":1,"77":1},"1":{"28":1,"40":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1},"2":{"0":1,"2":1,"3":9,"8":1,"13":1,"15":2,"18":2,"19":1,"21":3,"22":2,"26":2,"28":1,"29":1,"30":1,"31":1,"34":1,"37":3,"38":3,"39":6,"41":1,"42":1,"43":1,"44":1,"45":1,"51":1,"56":1,"58":1,"60":1,"61":1,"64":1,"65":2,"66":1,"68":1,"70":1,"71":1,"73":1,"74":17,"75":2,"76":5,"77":1,"78":2,"79":4,"80":1,"81":1,"82":4,"83":8,"84":5,"86":2,"87":6,"89":3,"90":1,"91":4,"93":3}}],["higher",{"2":{"74":1,"75":1,"76":1}}],["holds",{"2":{"74":1}}],["hosted",{"2":{"45":1}}],["hope",{"2":{"40":1}}],["homebrew",{"2":{"64":2}}],["home",{"2":{"33":1}}],["how",{"2":{"0":1,"2":1,"18":1,"34":1,"73":1,"74":5,"76":3,"86":1,"90":1}}],["have",{"2":{"19":1,"79":3}}],["hasher",{"2":{"33":2}}],["hashers",{"2":{"33":1}}],["hash",{"2":{"33":1,"74":18}}],["has",{"0":{"9":1},"2":{"84":1}}],["h",{"2":{"9":1}}],["https",{"2":{"8":1,"15":1,"21":1,"27":2,"37":2,"38":2,"43":1,"56":1,"57":1,"64":1,"65":1,"67":1,"79":1,"80":1,"81":1,"87":1,"89":1,"91":1,"93":1}}],["head",{"2":{"64":1}}],["herodotusdev",{"2":{"27":2}}],["herodotus",{"0":{"27":1},"1":{"28":1},"2":{"27":1,"33":2}}],["here",{"2":{"0":1,"2":1,"19":2,"23":1,"51":1,"76":1,"78":1,"83":3}}],["help",{"2":{"9":5,"25":1,"40":2,"62":2,"72":2}}],["helps",{"2":{"3":1,"75":1}}],["skips",{"2":{"82":1}}],["slow",{"2":{"74":1}}],["sierra",{"2":{"82":3}}],["since",{"2":{"79":1}}],["simplifies",{"2":{"74":1}}],["simplify",{"2":{"45":1}}],["sizes",{"2":{"75":1}}],["size",{"2":{"74":7,"75":2,"76":6,"83":1}}],["significantly",{"2":{"74":1}}],["src",{"2":{"61":2,"71":2}}],["symbolic",{"0":{"61":1,"71":1},"2":{"61":1,"71":1}}],["sympy==1",{"2":{"55":1,"65":1}}],["sympy",{"2":{"55":1,"65":1}}],["systems",{"2":{"74":1}}],["system",{"0":{"39":1,"54":1},"1":{"40":1},"2":{"34":1,"37":1,"38":1,"39":2,"42":1,"54":1,"65":2,"74":2,"75":1,"76":1,"79":2}}],["same",{"2":{"84":1}}],["save",{"2":{"39":1,"76":1}}],["safe",{"2":{"3":1}}],["some",{"2":{"74":1}}],["something",{"2":{"17":1}}],["soundness",{"2":{"74":1,"75":1}}],["sources",{"0":{"81":1},"2":{"81":1}}],["source",{"0":{"52":1},"1":{"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"39":2,"52":1}}],["solomon",{"2":{"74":1,"75":1}}],["software",{"2":{"64":1}}],["so",{"2":{"34":1}}],["smilling",{"2":{"40":1}}],["small",{"2":{"33":2}}],["smooth",{"2":{"18":1}}],["script",{"2":{"33":1}}],["scarb",{"0":{"82":1},"2":{"19":1,"79":1,"82":2}}],["shell",{"2":{"39":2,"84":1}}],["sh",{"2":{"33":3,"64":1}}],["shows",{"2":{"75":1}}],["shown",{"2":{"23":1,"76":1}}],["should",{"2":{"9":1,"76":2,"84":2}}],["snfoundry",{"2":{"30":1}}],["subsequent",{"2":{"74":1}}],["subgroups",{"2":{"74":1,"76":1}}],["subcommand",{"2":{"9":1}}],["such",{"2":{"74":1}}],["successfully",{"2":{"22":1,"83":1,"87":1,"89":1,"91":1,"93":1}}],["successfull",{"2":{"17":1}}],["successful",{"0":{"17":1},"2":{"40":1}}],["suitable",{"2":{"49":1}}],["supports",{"2":{"84":1}}],["supported",{"0":{"35":1},"2":{"3":1,"6":2}}],["super",{"2":{"42":1}}],["sudo",{"2":{"37":2,"38":6,"42":1,"44":1,"54":2,"56":1}}],["sure",{"2":{"13":1,"19":1,"30":1,"31":1,"33":1}}],["specify",{"2":{"76":1}}],["specifies",{"2":{"74":4,"75":1,"76":2}}],["specified",{"2":{"65":1}}],["specific",{"2":{"55":1,"65":1,"73":1,"74":1,"76":1}}],["specifically",{"2":{"3":1}}],["speeding",{"2":{"74":2}}],["splitting",{"0":{"22":1}}],["split",{"2":{"3":1,"22":1}}],["sdk",{"2":{"3":3}}],["sdkis",{"2":{"3":1}}],["separated",{"2":{"84":2}}],["several",{"2":{"74":1}}],["segments",{"2":{"83":1}}],["segment",{"2":{"74":3,"76":6,"84":1}}],["second",{"2":{"79":1}}],["secure",{"2":{"74":1}}],["security",{"0":{"75":1},"2":{"73":2,"74":6,"75":2,"76":3}}],["sections",{"2":{"76":1}}],["section",{"2":{"74":2,"83":2}}],["secs",{"2":{"6":2}}],["see",{"2":{"40":1}}],["serializer",{"2":{"27":2,"28":3}}],["serialized",{"2":{"13":2,"16":1}}],["serialize",{"0":{"13":1,"27":1},"1":{"28":1},"2":{"9":1,"13":1,"28":1}}],["serializing",{"0":{"28":1},"2":{"3":1,"9":1}}],["server",{"2":{"3":2}}],["sequencer",{"2":{"3":1}}],["sets",{"2":{"84":1}}],["setups",{"2":{"48":1}}],["setup",{"2":{"31":1}}],["settings",{"0":{"75":1},"2":{"73":1,"74":2,"75":1,"76":3}}],["setting",{"0":{"29":1},"1":{"30":1,"31":1},"2":{"33":1,"74":1,"75":1,"90":1}}],["set",{"0":{"15":1,"56":1},"2":{"3":2,"29":1,"30":1,"74":3}}],["structure",{"2":{"76":3}}],["string",{"2":{"3":1}}],["store",{"2":{"74":4,"76":5}}],["stored",{"2":{"74":1,"76":1}}],["stone6",{"2":{"33":2}}],["stone5",{"2":{"33":2}}],["stone",{"0":{"0":1,"1":1,"2":1,"3":1,"4":1,"8":1,"9":1,"11":1,"18":1,"34":1,"39":1,"41":1,"43":1,"45":1,"57":1,"67":1,"73":1,"74":1,"86":1,"90":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":2,"42":1,"43":1,"44":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"74":1,"75":1,"76":1,"87":1,"88":1,"89":1,"91":1,"92":1,"93":1},"2":{"0":1,"2":2,"3":6,"4":1,"8":2,"9":2,"11":1,"12":1,"13":1,"16":1,"18":1,"21":3,"26":6,"33":2,"34":1,"35":1,"37":2,"38":2,"41":1,"43":4,"44":2,"45":1,"47":1,"48":1,"49":1,"50":2,"51":5,"52":1,"56":1,"57":3,"58":2,"59":1,"61":2,"66":1,"67":3,"68":2,"69":1,"71":2,"73":1,"74":3,"76":1,"85":1,"86":2,"87":4,"88":3,"89":8,"90":1,"91":3,"92":3,"93":8}}],["step",{"0":{"43":1,"44":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"37":1,"38":1,"39":1,"52":2,"74":6,"75":3,"76":7,"79":1,"86":2}}],["steps",{"2":{"13":1,"18":1,"21":1,"74":1,"76":1,"79":1,"81":1,"87":1,"90":1}}],["statement",{"2":{"17":8}}],["start",{"2":{"76":1}}],["started",{"0":{"1":1}}],["stark",{"0":{"23":1,"26":1},"1":{"24":1,"25":1,"26":1},"2":{"3":3,"15":2,"23":1,"24":1,"25":1,"26":4,"74":6,"75":1,"76":6}}],["starkware",{"2":{"3":1,"61":2,"71":2,"79":1}}],["starknet",{"0":{"18":1,"29":1},"1":{"30":1,"31":1},"2":{"3":4,"9":1,"11":1,"18":1,"19":1,"29":1,"30":1,"33":6}}],["s",{"2":{"0":1,"2":1,"9":1,"32":1,"33":1,"39":1,"61":2,"71":2,"74":3,"79":1,"82":1,"84":3,"89":1,"93":1}}]],"serializationVersion":2}
